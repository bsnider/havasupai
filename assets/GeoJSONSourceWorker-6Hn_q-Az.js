import{hA as I,bx as R,L as E,hB as D,hC as Q,hD as v,hE as Z,cU as G,hF as N,gS as P,dV as M,ad as B,bH as L,dS as z,hG as H,hH as J,H as U,hI as $,hJ as V,hK as W,hL as K}from"./index-Ds3x37R4.js";import{u as Y}from"./executeQueryForSnapping-Dzb68MCE.js";import{f as X}from"./FeatureStore-CEMz4Wvo.js";import{x as b,j as w}from"./queryUtils-COPXxlo0.js";import{L as ee}from"./QueryEngine-POxbPKWU.js";import{I as te,N as se,E as ie}from"./geojson-ZZaXftfC.js";import{S as re,E as ne,d as T,f as j,p as F,h as C}from"./sourceUtils-CCs_x8oK.js";import"./timeSupport-D-DwB9kZ.js";import"./BoundsStore-6RZlbtxO.js";import"./PooledRBush-BohpeaqJ.js";import"./optimizedFeatureQueryEngineAdapter-tr85M_LY.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-ChtdlEVZ.js";import"./WhereClause-Bf-_fdxc.js";import"./utils-D9RHj8d9.js";import"./utils-DIPV3OIx.js";import"./utils-DydmfvMV.js";import"./ClassBreaksDefinition-Bn2ZuTP0.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-CTa3K0Fl.js";import"./date-Ctp1FiBW.js";const ae={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:re};class Re{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[s]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),i=te(s,{geometryType:e.geometryType}),o=e.fields||i.fields||[],l=e.hasZ!=null?e.hasZ:i.hasZ,d=i.geometryType;let y=e.objectIdField||i.objectIdFieldName||"__OBJECTID";const f=e.spatialReference||I;let u=e.timeInfo;o===i.fields&&i.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:i.unknownFields}});const p=new R(o);let n=p.get(y);n?(n.type!=="esriFieldTypeString"&&(n.type="esriFieldTypeOID"),n.editable=!1,n.nullable=!1,y=n.name):(n={alias:y,name:y,type:i.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(n));const c={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new E("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!D.jsonValues.includes(a.type))throw new E("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==n.name){const _=Q(a);_!==void 0&&(c[a.name]=_)}a.length==null&&(a.length=v(a))}if(u){if(u.startTimeField){const a=p.get(u.startTimeField);a?(u.startTimeField=a.name,a.type="esriFieldTypeDate"):u.startTimeField=null}if(u.endTimeField){const a=p.get(u.endTimeField);a?(u.endTimeField=a.name,a.type="esriFieldTypeDate"):u.endTimeField=null}if(u.trackIdField){const a=p.get(u.trackIdField);a?u.trackIdField=a.name:(u.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:u}}))}u.startTimeField||u.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:u}}),u=null)}const m=d?P(d):void 0,h=p.dateFields.length?{timeZoneIANA:G}:null,g={warnings:r,featureErrors:[],layerDefinition:{...ae,drawingInfo:m??void 0,templates:Z(c),extent:void 0,geometryType:d,objectIdField:y,fields:o,hasZ:!!l,timeInfo:u,dateFieldsTimeReference:h}},O={type:"object-id",fieldName:y};this._queryEngine=new ee({fieldsIndex:R.fromLayerJSON({fields:o,timeInfo:u,dateFieldsTimeReference:h}),geometryType:d,hasM:!1,hasZ:l,featureIdInfo:O,spatialReference:f,timeInfo:u,featureStore:new X({geometryType:d,hasM:!1,hasZ:l})});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(n);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=N(c,y);const x=await this._createFeatures(s);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,g.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:A,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(g.layerDefinition.extent=A,S){const{start:a,end:_}=S;g.layerDefinition.timeInfo.timeExtent=[a,_]}return g}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([ne(t,r),b(e.adds,t),b(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),Y(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var s;this._loadOptions.customParameters=e,(s=this._snapshotTask)==null||s.abort(),this._snapshotTask=M(this._snapshotFeatures),this._snapshotTask.promise.then((i=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,i);const o=this._normalizeFeatures(i);o&&this._queryEngine.featureStore.addMany(o)}),(i=>{this._queryEngine.featureStore.clear(),B(i)||L.getLogger("esri.layers.GeoJSONLayer").error(new E("geojson-layer:refresh","An error occurred during refresh",{error:i}))})),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:s}=this._queryEngine,i=se(e,{geometryType:t,hasZ:r,objectIdField:s});if(!z(this._queryEngine.spatialReference,I))for(const o of i)o.geometry!=null&&(o.geometry=H(w(J(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return i}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,s=(await U(t??"",{responseType:"json",query:{...r},signal:e})).data;return ie(s),s}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:s}=this._queryEngine,i=[];for(const o of e){const l=this._createDefaultAttributes(),d=T(s,l,o.attributes,!0);d?t==null||t.push(d):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[r],i.push(o))}return i}async _applyEdits(e){const{adds:t,updates:r,deletes:s}=e,i={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(i,t),r!=null&&r.length&&this._applyUpdateEdits(i,r),s==null?void 0:s.length){for(const d of s)i.deleteResults.push(j(d));this._queryEngine.featureStore.removeManyById(s)}const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:l,featureEditResults:i}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:s,hasM:i,hasZ:o,objectIdField:l,spatialReference:d,featureStore:y,fieldsIndex:f}=this._queryEngine,u=[],p={type:"object-id",fieldName:l};for(const n of t){if(n.geometry&&s!==$(n.geometry)){r.push(F("Incorrect geometry type."));continue}const c=this._createDefaultAttributes(),m=T(f,c,n.attributes);if(m)r.push(m);else{if(this._assignObjectId(c,n.attributes),n.attributes=c,n.uid!=null){const h=n.attributes[l];e.uidToObjectId[n.uid]=h}if(n.geometry!=null){const h=n.geometry.spatialReference??d;n.geometry=w(C(n.geometry,h),h,d)}u.push(n),r.push(j(n.attributes[l]))}}y.addMany(V([],u,s,o,i,p))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:s,hasZ:i,objectIdField:o,spatialReference:l,featureStore:d,fieldsIndex:y}=this._queryEngine,f={type:"object-id",fieldName:o};for(const u of t){const{attributes:p,geometry:n}=u,c=p==null?void 0:p[o];if(c==null){e.push(F(`Identifier field ${o} missing`));continue}if(!d.has(c)){e.push(F(`Feature with object id ${c} missing`));continue}const m=W(d.getFeature(c),r,i,s);if(n!=null){if(r!==$(n)){e.push(F("Incorrect geometry type."));continue}const h=n.spatialReference??l;m.geometry=w(C(n,h),h,l)}if(p){const h=T(y,m.attributes,p);if(h){e.push(h);continue}}d.add(K(m,r,i,s,f)),e.push(j(c))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let s=Number.NEGATIVE_INFINITY;for(const i of t)i.objectId&&(s=Math.max(s,i.objectId));return s=Math.max(0,s)+1,()=>s++}_assignObjectId(e,t,r=!1){const s=this._queryEngine.objectIdField;e[s]=r&&s in t?t[s]:this._objectIdGenerator()}async _checkProjection(e){try{await b(I,e)}catch{throw new E("geojson-layer","Projection not supported")}}}export{Re as default};
