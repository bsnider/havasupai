import{cQ as m,u as c,aa as g,ae as n,dD as l,at as p,f as d,r as o,m as w,d as u}from"./index-DtL3GvY-.js";import{S as y}from"./LayerView2D-CmQvEJbF.js";import{t as V}from"./GraphicContainer-Cey2RPR7.js";import{O as f}from"./GraphicsView2D-DiKn07n3.js";import{u as v}from"./LayerView-K9Vi9Xlh.js";import"./Container-a9FH1wCA.js";import"./AGraphicContainer-DzuWZD3X.js";import"./TechniqueInstance-CZxAVhNo.js";import"./UpdateTracking2D-nTH3N-bg.js";import"./Utils-CNt3DicP.js";import"./BoundingBox-Bq0HnYF9.js";import"./TileContainer-CmTbPvJx.js";import"./WGLContainer-C3g-5PAz.js";import"./WGLBrushVTLSymbol-CejKrYQS.js";import"./ShaderCompiler-C94JGjW7.js";import"./ProgramTemplate-Vr7ZcSVc.js";import"./FeatureCommandQueue-CChwACzx.js";import"./CIMSymbolHelper-CwSE3PYd.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-CJvfbTn1.js";import"./Rect-CUzevAry.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-CUU_3-Ob.js";import"./utils-Cj_QOTBu.js";import"./constants-BFLErLYb.js";import"./heatmapTextureUtils-BGyA77_w.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-2zHZgNJo.js";import"./OverrideHelper-CzPyjFl9.js";import"./callExpressionWithFeature-De1Vi9XY.js";import"./AttributeStore-CI9zGGLW.js";import"./queryUtils-CRjq5Dx4.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DVuQFYEV.js";import"./normalizeUtilsSync-Q7wMTszy.js";let a=class extends y(v){attach(){this.graphicsView=new f({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new V(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),m((()=>{var i;return(i=this.layer)==null?void 0:i.visible}),(()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()}))]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map((t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer}))):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t){let r;typeof i=="number"?r=[i]:i instanceof g?r=[i.uid]:Array.isArray(i)&&i.length>0?r=typeof i[0]=="number"?i:i.map((s=>s&&s.uid)):n.isCollection(i)&&i.length>0&&(r=i.map((s=>s&&s.uid)).toArray());const e=r==null?void 0:r.filter(l);if(!(e!=null&&e.length))return p();const h=(t==null?void 0:t.name)??d;return this._addHighlights(e,h),p((()=>!this.destroyed&&this._removeHighlights(e,h)))}_processHighlight(){var t;const i=this._getHighlights();(t=this.graphicsView)==null||t.setHighlight(i)}};o([w()],a.prototype,"graphicsView",void 0),a=o([u("esri.views.2d.layers.GraphicsLayerView2D")],a);const ri=a;export{ri as default};
