import{ao as S,bW as $,ap as R,u as q,Z as U,r as h,m as x,d as I}from"./index-CA3J3HgS.js";import{r as w}from"./BitmapContainer-BmbXX8CS.js";import{S as W}from"./LayerView2D-D1inZCJj.js";import{M as E}from"./ExportStrategy-B__Nq3PB.js";import{u as H}from"./LayerView-LfRtBo31.js";import{i as z}from"./RefreshableLayerView-G0vLJ6co.js";import{m as A}from"./WMSLayerView-Cm4EMCNW.js";import"./WGLContainer-D6RjDQyD.js";import"./Utils-PFgmSdQk.js";import"./BoundingBox-G_oUBWBn.js";import"./WGLBrushVTLSymbol-BTMQ5naM.js";import"./ShaderCompiler-C94JGjW7.js";import"./ProgramTemplate-ClxdVwjR.js";import"./Container-Ckf_gxKJ.js";import"./BitmapTechnique-DwskDS8b.js";import"./GraphShaderModule-kXHBb9ct.js";import"./TechniqueType-pk2C5RYg.js";import"./bitmapUtils-DVu1EfbM.js";import"./ExportWMSImageParameters-pG7lUjmG.js";import"./timeSupport-DcIyHYOr.js";let s=class extends A(z(W(H))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch((e=>{S(e)||$.getLogger(this).error(e)}))}attach(){const{layer:t}=this,{imageMaxHeight:e,imageMaxWidth:r}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new E({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:e,imageMaxWidth:r,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles(R((()=>this.exportImageVersion),(()=>this.requestUpdate())))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:e,bitmapContainer:r}=this,{x:a,y:o}=t,{spatialReference:b}=e;let i,n=0,d=0;if(r.children.some((M=>{const{width:c,height:g,resolution:l,x:p,y:m}=M,y=p+l*c,f=m-l*g;return a>=p&&a<=y&&o<=m&&o>=f&&(i=new U({xmin:p,ymin:f,xmax:y,ymax:m,spatialReference:b}),n=c,d=g,!0)})),!i)return null;const u=i.width/n,v=Math.round((a-i.xmin)/u),C=Math.round((i.ymax-o)/u);return{extent:i,width:n,height:d,x:v,y:C}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,r,a){return this.layer.fetchImageBitmap(t,e,r,{timeExtent:this.timeExtent,...a})}};h([x()],s.prototype,"strategy",void 0),h([x()],s.prototype,"updating",void 0),s=h([I("esri.views.2d.layers.WMSLayerView2D")],s);const et=s;export{et as default};
