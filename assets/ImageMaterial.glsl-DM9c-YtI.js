import{Ep as $,vm as x,Eq as b,Er as D,Es as O,Et as w,Eu as y,Ev as A,aM as o,Ew as g,Ex as _,Ey as S,Ez as C,EA as N,tD as R,EB as M,EC as V,_ as F,ED as L,EE as j,EF as z,EG as B,EH as U,EI as W,EJ as H,EK as Q,EL as q,EM as G,EN as k,EO as J,EP as K,EQ as X,ER as Y,mo as f,rO as Z,ES as ee,r as u,ET as c,pF as h,EU as P,EV as E,EW as te,EX as se,EY as re,EZ as ie,E_ as ae,vA as oe,E$ as ne,F0 as le,rQ as ue}from"./index-Ds3x37R4.js";import{c as ce}from"./DefaultLayouts-DCKmjEQU.js";import{r as pe}from"./TriangleMaterial-K3vSxC87.js";class m extends ${}function T(s){const e=new x,{vertex:t,fragment:i,varyings:p}=e,{output:n,perspectiveInterpolation:l}=s;return b(t,s),e.include(D,s),e.include(O,s),e.fragment.include(w,s),e.include(y,s),e.include(A,s),e.attributes.add(o.POSITION,"vec3"),e.attributes.add(o.UV0,"vec2"),l&&e.attributes.add(o.PERSPECTIVEDIVIDE,"float"),t.main.add(_`
    vpos = position;
    forwardViewPosDepth((view * vec4(vpos, 1.0)).xyz);
    vTexCoord = uv0;
    gl_Position = transformPosition(proj, view, vpos);
    ${g(l,"gl_Position *= perspectiveDivide;")}`),p.add("vpos","vec3",{invariant:!0}),p.add("vTexCoord","vec2"),i.include(S),i.uniforms.add(new C("opacity",(r=>r.opacity)),new N("tex",(r=>r.glTexture))).main.add(_`
    discardBySlice(vpos);
    discardByTerrainDepth();
    ${g(n===R.ObjectAndLayerIdColor,"fragColor = vec4(0, 0, 0, 1); return;")}
    vec4 finalColor = texture(tex, vTexCoord) * opacity;
    outputColorHighlightOID(finalColor, vpos, finalColor.rgb);`),e}const de=Object.freeze(Object.defineProperty({__proto__:null,ImageMaterialPassParameters:m,build:T},Symbol.toStringTag,{value:"Module"}));class he extends M{constructor(e,t){super(e,t,new V(de,(()=>F(()=>Promise.resolve().then(()=>ge),void 0))),I)}_getPipelineState(e,t){const{oitPass:i,output:p,hasOccludees:n,cullFace:l}=e,r=i===L.NONE;return j({blending:X(p)?r?J:K(i):null,culling:k(l),depthTest:{func:G(i)},depthWrite:q(e),drawBuffers:Q(i,p),colorWrite:H,stencilWrite:n?W:null,stencilTest:n?t?B:U:null,polygonOffset:z(e)})}initializePipeline(e){return this._occludeePipeline=this._getPipelineState(e,!0),this._getPipelineState(e,!1)}getPipeline(e){return e?this._occludeePipeline:super.getPipeline()}}const I=new Map([[o.POSITION,0],[o.UV0,2],[o.PERSPECTIVEDIVIDE,3]]);class a extends Y{constructor(e){super(),this.draped=e,this.cullFace=f.None,this.enableOffset=!0,this.writeDepth=!0,this.hasOccludees=!1,this.terrainDepthTest=!1,this.cullAboveTerrain=!1,this.perspectiveInterpolation=!0,this.textureCoordinateType=Z.None,this.emissionSource=ee.None,this.discardInvisibleFragments=!0,this.occlusionPass=!1,this.objectAndLayerIdColorInstanced=!1,this.snowCover=!1}}u([c({count:f.COUNT})],a.prototype,"cullFace",void 0),u([c()],a.prototype,"enableOffset",void 0),u([c()],a.prototype,"writeDepth",void 0),u([c()],a.prototype,"hasOccludees",void 0),u([c()],a.prototype,"terrainDepthTest",void 0),u([c()],a.prototype,"cullAboveTerrain",void 0),u([c()],a.prototype,"perspectiveInterpolation",void 0);class Te extends pe{constructor(e){super(e,ve),this.vertexAttributeLocations=I,this.supportsEdges=!0,this.produces=new Map([[h.OPAQUE_MATERIAL,t=>P(t)],[h.TRANSPARENT_MATERIAL,t=>E(t)&&this.parameters.writeDepth],[h.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,t=>E(t)&&!this.parameters.writeDepth],[h.DRAPED_MATERIAL,t=>E(t)||P(t)]]),this._configuration=new a(e.draped)}dispose(){this.setParameters({texture:void 0})}getConfiguration(e,t){return super.getConfiguration(e,t,this._configuration),this._configuration.cullFace=this.parameters.cullFace,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.hasOccludees=t.hasOccludees,this._configuration.oitPass=t.oitPass,this._configuration.enableOffset=t.camera.relativeElevation<te,this._configuration.terrainDepthTest=t.terrainDepthTest,this._configuration.cullAboveTerrain=t.cullAboveTerrain,this._configuration.perspectiveInterpolation=this.parameters.perspectiveInterpolation,this._configuration}get visible(){return!0}createGLMaterial(e){return new Ee(e)}createBufferWriter(){let e=ce;return this.parameters.perspectiveInterpolation&&(e=e.clone().f32(o.PERSPECTIVEDIVIDE)),new fe(e)}}class Ee extends re{constructor(e){super({...e,...e.material.parameters}),this.parameters=e;const t=this._material.parameters.texture;ie(t)&&e.textures.updater.add(t)}dispose(){this.parameters.textures.updater.remove(this._material.parameters.texture)}beginSlot(e){return this.getTechnique(he,e)}}class fe extends ae{write(e,t,i,p,n,l){for(const r of this.vertexBufferLayout.fields.keys()){const d=i.get(r);if(d)if(r===o.PERSPECTIVEDIVIDE){oe(d.size===1);const v=n.getField(r,ne);v&&le(d,v,l)}else ue(r,d,e,t,n,l)}return null}}class ve extends se{constructor(e,t){super(),this.texture=e,this.draped=t,this.writeDepth=!0,this.hasSlicePlane=!1,this.cullFace=f.None,this.opacity=1,this.perspectiveInterpolation=!1}get glTexture(){return this.texture.glTexture}}const ge=Object.freeze(Object.defineProperty({__proto__:null,ImageMaterialPassParameters:m,build:T},Symbol.toStringTag,{value:"Module"}));export{Te as _};
