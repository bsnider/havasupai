import{em as p,cQ as h,u as c,en as d,al as u,f as g,bm as y,am as m,dt as f,r,m as i,d as b}from"./index-CA3J3HgS.js";import{l as v}from"./LayerView3D-JeQQWbeY.js";import{l as w,r as S}from"./queryForSymbologySnapping-BCqXCgd4.js";import{x as E}from"./GraphicsProcessor-Cv4W8b-n.js";import{u as P}from"./LayerView-LfRtBo31.js";import"./renderingInfoUtils-BYCrXbyj.js";import"./ExtentSet-DXI8r6hA.js";import"./optimizedFeatureQueryEngineAdapter-D-Nn7S_S.js";import"./PooledRBush-Cb3BoktC.js";import"./popupUtils-DN9oIyBS.js";import"./Graphics3DObjectStates-DF91xPx2.js";import"./highlightUtils-CnlLgv1H.js";let s=class extends v(P){constructor(){super(...arguments),this.type="graphics-3d",this.symbologySnappingSupported=!0,this._slicePlaneEnabled=!1,this.fullExtentInLocalViewSpatialReference=null,this.ignoresMemoryFactor=!0}get highlightOptions(){return null}initialize(){this._set("processor",new E({owner:this,scaleVisibilityEnabled:!0,frustumVisibilityEnabled:!0})),this.addResolvingPromise(this.processor.initializePromise),this.addHandles(this.layer.on("graphic-update",(e=>this.processor.graphicsCore.graphicUpdateHandler(e)))),this.layer.internal?this.notifyChange("updating"):(this.view.viewingMode==="local"&&this.addResolvingPromise((async()=>this.fullExtentInLocalViewSpatialReference=await p(this.layer.fullExtent,this.view.spatialReference))()),this.addHandles(h((()=>{var e,t;return(t=(e=this.view)==null?void 0:e.basemapTerrain)==null?void 0:t.ready}),(()=>()=>this.notifyChange("updating")),{once:!0})))}destroy(){this._updatingHandles.removeAll(),this._set("processor",c(this.processor))}get loadedGraphics(){return this.layer.graphics}get legendEnabled(){var e;return this.canResume()&&!((e=this.processor)!=null&&e.frustumVisibilitySuspended)}get visibleAtCurrentScale(){var e;return u()?d(this.layer.effectiveScaleRange,this.view.scale):!((e=this.processor)!=null&&e.scaleVisibilitySuspended)}get slicePlaneEnabled(){const e=this.layer.internal;return this._slicePlaneEnabled&&!e}set slicePlaneEnabled(e){this._slicePlaneEnabled=e}getSuspendInfo(){var t;const e=super.getSuspendInfo();return e.outsideOfView=((t=this.processor)==null?void 0:t.frustumVisibilitySuspended)??!1,e}getHit(e){return this.processor.getHit(e)}whenGraphicBounds(e,t){return this.processor.whenGraphicBounds(e,t)}computeAttachmentOrigin(e,t){var o;return(o=this.processor)==null?void 0:o.computeAttachmentOrigin(e,t)}getSymbolLayerSize(e,t){return this.processor.getSymbolLayerSize(e,t)}queryGraphics(){return Promise.resolve(this.loadedGraphics)}maskOccludee(e){return this.processor.maskOccludee(e)}highlight(e,t){return this.processor.highlight(e,(t==null?void 0:t.name)??g)}notifyContentGeometryUpdate(){this.emit("visible-geometry-changed")}async elevationAlignPointsInFeatures(e,t){const{processor:o}=this;if((o==null?void 0:o.graphics3DGraphics)==null)throw new y("graphicslayerview3d:missing-processor","A Graphics3D processor is needed to resolve graphics elevation.");const{graphics3DGraphics:n}=o,l=a=>typeof a=="number"?n.get(a):void 0;return w(this.view,this.layer,l,e,t)}async queryForSymbologySnapping(e,t){return S(this.processor,e,t)}get updatePolicy(){var e;return((e=this.processor)==null?void 0:e.graphicsCore.effectiveUpdatePolicy)||m.SYNC}isUpdating(){var e,t;return this.view&&this.layer&&!(!((e=this.processor)!=null&&e.updating)&&(this.layer.internal||(t=this.view.basemapTerrain)!=null&&t.ready))}get performanceInfo(){return new f(this.usedMemory,this.loadedGraphics.length,-1,-1)}get usedMemory(){var e,t;return((t=(e=this.processor)==null?void 0:e.graphicsCore)==null?void 0:t.usedMemory)??0}get unloadedMemory(){var e,t;return(t=(e=this.processor)==null?void 0:e.graphicsCore)==null?void 0:t.unprocessedMemoryEstimate}get test(){return{graphics3DProcessor:this.processor,loadedGraphics:this.loadedGraphics}}};r([i()],s.prototype,"highlightOptions",null),r([i()],s.prototype,"loadedGraphics",null),r([i({readOnly:!0})],s.prototype,"legendEnabled",null),r([i()],s.prototype,"layer",void 0),r([i({readOnly:!0})],s.prototype,"processor",void 0),r([i({readOnly:!0})],s.prototype,"visibleAtCurrentScale",null),r([i()],s.prototype,"_slicePlaneEnabled",void 0),r([i({type:Boolean})],s.prototype,"slicePlaneEnabled",null),s=r([b("esri.views.3d.layers.GraphicsLayerView3D")],s);const D=s;export{D as default};
