import{il as L,nw as u,up as _,nA as x,ft as v,er as Z,uq as O,ih as g,ur as R,kb as M,ra as G,iz as K,aU as k,us as F,ut as Q,uu as H,uv as b,uw as z,ug as A,ux as W,uy as X,uz as q,nn as B,bh as U,ke as D,uA as Y,uB as T,ig as J,uC as ee,uD as te,uE as se,fS as ie,nx as re,nz as ne,ny as oe,fm as ae,aT as he,uF as de,uG as le,uH as ce,e as pe,ae as ge,nu as ue,km as fe,r as y,m as $,d as xe}from"./index-DtL3GvY-.js";class C{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=L.shortLineThreshold*L.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(u(s.leftVertex.pos,this.view,e),u(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(x(e,t,v,this.view),x(s,t,v,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=Z(t);return O(g(s),g(e))*i<L.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class ve extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=x(s,n,v,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const c=R(d,o,e);this._processCandidateProposal(c.left,c.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=x(s,a,v,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(u(h.leftVertex.pos,n,e),u(d.rightVertex.pos,n,e),s,o,e,t);const c=r.edges[0];let p=c;do{if(p!==i.leftEdge&&p!==i.rightEdge&&this.edgeExceedsShortLineThreshold(p,e)){const f=R(p,n,e);this._processCandidateProposal(f.left,f.right,s,o,e,t)}p=p.rightVertex.rightEdge}while(p&&p!==c);return t}_processCandidateProposal(s,e,t,i,r,n){var c;const{spatialReference:a,pointer:o}=r,h=k();Ee(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const d=M(G(h));_(i,x(d,a,v,this.view))<this.squaredProximityThreshold(o)&&n.push(new K({lineStart:s,lineEnd:e,targetPoint:d,isDraped:((c=r.elevationInfo)==null?void 0:c.mode)==="on-the-ground"}))}}function Ee(l,s,e,t,i,r){me(l,s,e,t,i,r)||we(l,t,s,e)}function me(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(Q.shortestSignedDiff(n,a))>Math.PI/2?H.normalize(n+Math.PI):n;return b(l,e,i,z(o,"meters"),A(h,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function we(l,s,e,t){W(s,{start:e,end:t,type:X.LINE},l),l[2]=s[2]}let Ve=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=x(s,e.spatialReference,v,a),h=u(t.vertices[r-1].pos,a,e),d=u(t.vertices[0].pos,a,e),c=t.edges[i-1];let p=c;do{if(this.edgeExceedsShortLineThreshold(p,e)){const f=R(p,a,e);this._checkEdgeForParallelLines(f,h,s,o,e,n),this._checkEdgeForParallelLines(f,d,s,o,e,n)}p=p.leftVertex.leftEdge}while(p&&p!==c);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=x(s,e.spatialReference,v,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],c=u(d.pos,n,e),p=r.vertices.length,f=r.vertices[p-1],V=u(f.pos,n,e),P=r.edges[0];let E=P;do{if(E!==o&&E!==h&&this.edgeExceedsShortLineThreshold(E,e)){const S=R(E,n,e);o&&this._checkEdgeForParallelLines(S,u(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,u(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===f&&this._checkEdgeForParallelLines(S,c,s,a,e,t)}E=E.rightVertex.rightEdge}while(E&&E!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){var p;const a=s.left,o=s.right;if(q(m,g(e),g(a),g(o)),B(m,g(e))<L.parallelLineThreshold)return;q(m,g(t),g(a),g(o),g(e));const{spatialReference:h,pointer:d}=r,c=M(D(m[0],m[1],t[2]));if(_(i,x(c,h,v,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(c,e,r)||this.isVertical(a,o,r)||ye(s,n))return;n.push(new Y({referenceLine:s,lineStart:e,targetPoint:c,isDraped:((p=r.elevationInfo)==null?void 0:p.mode)==="on-the-ground"}))}}};function ye(l,s){const e=l.left,t=l.right;for(const i of s)if(q(m,g(t),g(i.constraint.start),g(i.constraint.end),g(e)),B(m,g(t))<L.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const m=U();class Le extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=x(s,e.spatialReference,v,r),a=t.vertices.at(-1);this._checkForSnappingCandidate(T.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate(T.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=x(s,e.spatialReference,v,r),a=i.leftEdge,o=i.rightEdge;if(a!=null&&a.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o!=null&&o.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate(T.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=u(i.pos,h,o),c=u(r.pos,h,o);_e(I,c,d,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,c,d,I,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){var E;const{spatialReference:h,pointer:d}=o,c=J(j,g(n),g(i)),p=ee(r,c)/te(r),f=se(j,g(i),r,p),V=M(D(f[0],f[1],n[2]));if(_(a,x(V,h,v,this.view))>this.squaredProximityThreshold(d)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=ie(k(),i,r,Math.sign(p));e.push(new re({targetPoint:V,constraint:new oe(i,G(P)),previousVertex:t,otherVertex:i,otherVertexType:ne.CENTER,selfSnappingType:s,isDraped:((E=o.elevationInfo)==null?void 0:E.mode)==="on-the-ground"}))}}function _e(l,s,e,t,i,r){Pe(l,s,e,t,i,r)||Se(l,s,e)}function Pe(l,s,e,t,{spatialReference:i},r){const n=F(s,e,i,i);if(n==null)return!1;const a=F(e,t,i,i);if(a==null)return!1;const o=Math.sign(H.shortestSignedDiff(n,a))*Math.PI*.5,h=A(n+o,"radians","geographic"),d=k(),c=r.geodesicDistance(e,t,i);return c!=null&&(b(d,e,i,z(c,"meters"),h,"geodesic"),ae(l,d,e),!0)}function Se(l,s,e){const t=J(j,g(e),g(s));he(l,t[1],-t[0],0)}const j=U(),I=k();let Te=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=u(a.pos,n,e),d=u(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=u(i.leftEdge.leftVertex.pos,n,e),o=u(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){var f;if(!this.exceedsShortLineThreshold(s,e,i))return;const n=de(N,g(s),g(e),.5),a=.5*O(g(s),g(e)),o=le(N,g(t),n,a),h=M(D(o[0],o[1],t[2])),{spatialReference:d,pointer:c}=i,p=x(t,d,v,this.view);if(_(p,x(h,d,v,this.view))<this.squaredProximityThreshold(c)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new ce({targetPoint:h,point1:s,point2:e,isDraped:((f=i.elevationInfo)==null?void 0:f.mode)==="on-the-ground"}))}}};const N=U();let w=class extends pe{constructor(l){super(l),this.updating=!1,this._snappers=new ge,this._domain=ue.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new ve(this.view,this.options,this.geodesicLengthMeasurementUtils),new Le(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return fe(l,t),t}};y([$({readOnly:!0})],w.prototype,"updating",void 0),y([$({constructOnly:!0})],w.prototype,"view",void 0),y([$({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),y([$()],w.prototype,"options",null),w=y([xe("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
