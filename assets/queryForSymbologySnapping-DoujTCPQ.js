import{$,lV as O,lW as P,cJ as D,aM as q,b1 as E,lX as G,lY as J,lZ as U,l_ as W,aU as A,d0 as B}from"./index-DtL3GvY-.js";async function M(t,l,d,p,o){const{elevationProvider:f,renderCoordsHelper:i}=t,{elevationInfo:u}=l,{pointsInFeatures:m,spatialReference:g}=p,h=$.fromJSON(g),y=O(u,!0),I=await P(y,h,o);D(o);const c=[],e=new Set,s=new Set,a=new E,n=q(0,0,0,$.WGS84),r=new W,S=A();n.spatialReference=h;const j=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:w,points:v}of m){const b=d(w);if(b==null){for(const R of v)c.push(R.z??0);e.add(w);continue}b.isDraped&&s.add(w);const z=b.graphic.geometry;a.setFromElevationInfo(G(z,u)),a.updateFeatureExpressionInfoContext(I,b.graphic,l);for(const{x:R,y:C,z:F}of v)n.x=R,n.y=C,n.z=F??0,await J(n,S,j,0,{signal:o}),U(S,f,a,i,r),c.push(r.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function N(t,l,d){if(t==null||l.candidates.length===0)return x;const p=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],f=[],{renderer:i}=t,u=i!=null&&"arcadeRequired"in i&&i.arcadeRequired?B():null,m=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await u,r=await t.getRenderingInfoAsync(s,i,n,{signal:d});return r==null?[]:a.queryForSnapping(e,h,r,d)},{candidates:g,spatialReference:h}=l;for(let e=0;e<g.length;++e){const s=g[e],{objectId:a}=s,n=typeof a=="number"?p==null?void 0:p.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:r}=n;r.symbologySnappingSupported&&(o.push(m(s,n)),f.push(e))}if(o.length===0)return x;const y=await Promise.all(o);D(d);const I=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=f[e];for(const n of s)I.push(n),c.push(a)}return{candidates:I,sourceCandidateIndices:c}}const x={candidates:[],sourceCandidateIndices:[]};export{M as l,N as r};
