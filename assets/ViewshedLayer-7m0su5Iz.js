import{ae as q,ai as T,a3 as j,dZ as G,o6 as H,et as O,z as J,gF as S,dz as R,r as s,m as r,d_ as D,d as F,eo as A,G as Q,J as U,Q as Y,q as Z}from"./index-Ds3x37R4.js";import{c as N}from"./Viewshed-DUTLGccU.js";import{l as k}from"./Analysis-Dy-IawHI.js";import"./featureReferenceUtils-BkdyPV39.js";const E=j.ofType(N);let l=class extends k{constructor(e){super(e),this.type="viewshed",this._extent=null}initialize(){this.addHandles(q((()=>this._computeExtent()),(e=>{e.pending==null&&(this._extent=e.extent)}),T))}get viewsheds(){return this._get("viewsheds")||new E}set viewsheds(e){this._set("viewsheds",G(e,this.viewsheds,E))}get spatialReference(){for(const e of this.viewsheds)if(e.observer!=null)return e.observer.spatialReference;return null}get extent(){return this._extent}get valid(){return this.viewsheds.every((e=>e.valid))}async waitComputeExtent(){const e=this._computeExtent();e.pending!=null&&await e.pending}_computeExtent(){const{spatialReference:e}=this;if(e==null)return{pending:null,extent:null};const o=this.viewsheds.filter((i=>i.observer!=null)),p=o.map((i=>i.observer)).toArray(),u=H(p,e);return u.pending!=null?{pending:u.pending,extent:null}:{pending:null,extent:u.geometries.map(((i,d)=>{const g=o.at(d);return i!=null&&g!=null?this._computeViewshedExtent(this.viewsheds.at(d),i):null})).filter((i=>i!=null)).reduce(((i,d)=>B(i,d)),null)}}_computeViewshedExtent(e,o){const{farDistance:p,heading:u,tilt:i,horizontalFieldOfView:d,verticalFieldOfView:g}=e,{spatialReference:f}=o,z=d/2,_=g/2,$=p/f.metersPerUnit,P=[O.normalize(u-z),u,O.normalize(u+z)],h=J.fromPoint(o),m=v=>{const c=P.map((a=>O.normalize(a-v)));if(c[0]>c[2]||d===360)return $;const y=c.map((a=>Math.abs(a>180?360-a:a))).reduce(((a,x)=>a>x?x:a));return y>90?0:$*Math.cos(R(y))};h.xmax+=m(90),h.xmin-=m(-90),h.ymax+=m(0),h.ymin-=m(180);const w=o.z;if(w!=null){let v=w,c=w;const y=i-90,a=A(y+_,-90,90),x=A(y-_,-90,90),b=f!=null&&f.isGeographic?p:$;v+=b*V(a),c+=b*V(x);const C=L(_)*b,M=V(y)*C*(1-L(z));i<90&&(v-=M),i>90&&(c-=M),h.zmax=Math.max(v,w),h.zmin=Math.min(c,w)}return h}equals(e){return this===e||super.equals(e)&&S(this.viewsheds.toArray(),e.viewsheds.toArray(),((o,p)=>o.equals(p)))}clear(){this.viewsheds.removeAll()}};function B(t,e){return t==null?e:e==null?t:t.union(e)}function L(t){return Math.cos(R(t))}function V(t){return Math.sin(R(t))}s([r({type:["viewshed"]})],l.prototype,"type",void 0),s([r({cast:D,type:E,nonNullable:!0})],l.prototype,"viewsheds",null),s([r({readOnly:!0})],l.prototype,"spatialReference",null),s([r()],l.prototype,"_extent",void 0),s([r()],l.prototype,"extent",null),s([r({readOnly:!0})],l.prototype,"valid",null),l=s([F("esri.analysis.ViewshedAnalysis")],l);let n=class extends Q(U(Y)){constructor(t){super(t),this.type="viewshed",this.operationalLayerType="ViewshedLayer",this.source=new l,this.opacity=1}initialize(){this.addHandles(q((()=>this.source),((t,e)=>{e!=null&&e.parent===this&&(e.parent=null),t!=null&&(t.parent=this)}),T))}async load(){return this.addResolvingPromise(this.source.waitComputeExtent()),this}get spatialReference(){return this.source.spatialReference}get fullExtent(){return this.source.extent}releaseAnalysis(t){this.source===t&&(this.source=new l)}get analysis(){return this.source}set analysis(t){this.source=t}get viewsheds(){return this.source.viewsheds}set viewsheds(t){this.source.viewsheds=t}writeViewsheds(t,e,o,p){e.viewsheds=t.filter((u=>u.valid)).toJSON(p)}};s([r({json:{read:!1},readOnly:!0})],n.prototype,"type",void 0),s([r({type:["ViewshedLayer"]})],n.prototype,"operationalLayerType",void 0),s([r({type:l,nonNullable:!0})],n.prototype,"source",void 0),s([r({readOnly:!0})],n.prototype,"spatialReference",null),s([r({readOnly:!0})],n.prototype,"fullExtent",null),s([r({readOnly:!0,json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],n.prototype,"opacity",void 0),s([r({type:["show","hide"]})],n.prototype,"listMode",void 0),s([r({type:j.ofType(N),json:{write:{ignoreOrigin:!0},origins:{"web-scene":{write:{ignoreOrigin:!0}}}}})],n.prototype,"viewsheds",null),s([Z("web-scene","viewsheds")],n.prototype,"writeViewsheds",null),n=s([F("esri.layers.ViewshedLayer")],n);const te=n;export{te as default};
