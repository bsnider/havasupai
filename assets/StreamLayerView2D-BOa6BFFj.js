import{ae as m,L as h,dN as y,Y as g,cV as u,el as f,r as o,m as p,d as v}from"./index-Ds3x37R4.js";import{n as _,c as S}from"./FeatureLayerView2D-PSnoJP0U.js";import{r as I}from"./StreamLayerView-BjUwnjyn.js";import"./Container-c-WAtzQc.js";import"./timeSupport-DDgy1azU.js";import"./AttributeBinsFeatureSet-C747GnCJ.js";import"./AttributeBinsQuery-Ov1ZFL2Z.js";import"./queryUtils-COPXxlo0.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-CTa3K0Fl.js";import"./LayerView2D-CuuPUfRQ.js";import"./TechniqueInstance-Br_ttQ5g.js";import"./UpdateTracking2D-D8pzRntg.js";import"./Utils-Cg5ubyWr.js";import"./BoundingBox-ojS2WC6-.js";import"./TileContainer-BG7YbpB2.js";import"./WGLContainer-TrZCBzw7.js";import"./WGLBrushVTLSymbol-DjhwW74T.js";import"./ShaderCompiler-C94JGjW7.js";import"./ProgramTemplate-9qDW07lG.js";import"./FeatureCommandQueue-IYLbFcQN.js";import"./CIMSymbolHelper-Mc-3ZV3A.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-MBYNNnqY.js";import"./Rect-CUzevAry.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-BAPxSWsA.js";import"./utils-DzInHlGV.js";import"./constants-BFLErLYb.js";import"./heatmapTextureUtils-CBnHN3t9.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-B4HK_sPX.js";import"./CircularArray-CujHzHWW.js";import"./SDFHelper-DvmYzjWP.js";import"./featureServiceUtils-DlkDdQUn.js";import"./constants-B4mRqufT.js";import"./bundle-6EcuAM-e.js";import"./FeatureLayerView-5hqjFI0T.js";import"./FeatureIdInfo-iL5WjyEH.js";import"./featurePopupQueryUtils--FDRdoZy.js";import"./floorFilterUtils-MtPgm5NF.js";import"./popupUtils-B7wJAZVr.js";import"./LayerView-B2e2cy0J.js";import"./RefreshableLayerView-Bz7uUOz8.js";let i=class extends I(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),m((()=>this.layer.purgeOptions),(()=>this._update())),m((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return y(e.map((r=>this.on(r,t))));const s=["data-received","message-received"].includes(e);s&&this.getWorker().then((r=>r.streamMessenger.enableEvent(e,!0)));const a=super.on(e,t),n=this;return g((()=>{a.remove(),s&&(n._workerProxy.closed||n.hasEventListener(e)||n.getWorker().then((r=>r.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){var a,n,r;if(!((a=this.layer.timeInfo)!=null&&a.endField||(n=this.layer.timeInfo)!=null&&n.startField||(r=this.layer.timeInfo)!=null&&r.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const s=await this.getWorker();return _(s.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((d=>{const l=u.fromJSON(d);return l.features.forEach((c=>{c.layer=this.layer,c.sourceLayer=this.layer})),l})),new u({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(f)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:s=>{this.set(s.propertyName,s.value)}}}};o([p()],i.prototype,"pipelineConnectionStatus",void 0),o([p()],i.prototype,"pipelineErrorString",void 0),o([p({readOnly:!0})],i.prototype,"connectionError",null),o([p({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=o([v("esri.views.2d.layers.StreamLayerView2D")],i);const he=i;export{he as default};
