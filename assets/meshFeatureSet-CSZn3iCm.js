import{jJ as y,bW as d,hq as l,Z as S,di as g,$ as N,aa as D}from"./index-DtL3GvY-.js";import{q as E}from"./Mesh-DvuSSt3U.js";import{n as M,i as F}from"./External-BLat3W8f.js";import{n as T,i as I}from"./meshFeatureAttributes-DbmyQlRe.js";import"./MeshComponent-DdvOl3R7.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshTransform-Cb8m45bF.js";import"./MeshVertexAttributes-CB77a8P6.js";import"./triangulationUtils-BuH1nIo8.js";import"./deduplicate-C7ufsMMT.js";import"./vertexSpaceConversion-DRCe-q7b.js";import"./vec4-DIh6nNCk.js";const $=()=>d.getLogger("esri.rest.support.meshFeatureSet");function z(e,s,t){const r=t.features;t.features=[],delete t.geometryType;const n=g.fromJSON(t);if(n.geometryType="mesh",!t.assetMaps)return n;const o=L(s,t.assetMaps),i=e.sourceSpatialReference??N.WGS84,f=t.globalIdFieldName,{outFields:a}=e,p=a!=null&&a.length>0?b(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const c=w(u,f,i,s,o);n.features.push(new D({geometry:c,attributes:p(u)}))}return n}function b(e){return({attributes:s})=>{if(!s)return{};if(!e)return s;for(const t in s)e.has(t)||delete s[t];return s}}function w(e,s,t,r,n){const o=e.attributes[s],i=n.get(o);if(i==null||!e.geometry)return null;const f=T(e.attributes,t,r.transformFieldRoles),a=S.fromJSON(e.geometry);a.spatialReference=t;const p=I(e.attributes,r.transformFieldRoles),u=t.isGeographic?"local":"georeferenced",c=O(i);return c?E.createWithExternalSource(f,c,{extent:a,transform:p,vertexSpace:u,unitConversionDisabled:!0}):E.createIncomplete(f,{extent:a,transform:p,vertexSpace:u})}var m;function L(e,s){const t=new Map;for(const r of s){const n=r.parentGlobalId;if(n==null)continue;const o=r.assetName,i=r.assetType,f=r.assetHash,a=r.assetURL,p=r.conversionStatus,u=r.seqNo,c=y(i,e.supportedFormats);if(!c){$().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const h=l(t,n,(()=>({files:new Map})));l(h.files,o,(()=>({name:o,type:i,mimeType:c,status:P(p),parts:[]}))).parts[u]={hash:f,url:a}}return t}function O(e){const s=Array.from(e.files.values()),t=new Array;for(const r of s){if(r.status!==m.COMPLETED)return null;const n=new Array;for(const o of r.parts){if(!o)return null;n.push(new M(o.url,o.hash))}t.push(new F(r.name,r.mimeType,n))}return{type:"service",assets:t}}function P(e){switch(e){case"COMPLETED":case"SUBMITTED":return m.COMPLETED;case"INPROGRESS":return m.PENDING;default:return m.FAILED}}(function(e){e[e.FAILED=0]="FAILED",e[e.PENDING=1]="PENDING",e[e.COMPLETED=2]="COMPLETED"})(m||(m={}));export{L as assetMapFromAssetMapsJSON,w as extractMesh,z as meshFeatureSetFromJSON};
