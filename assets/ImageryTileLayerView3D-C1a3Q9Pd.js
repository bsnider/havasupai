import{mb as o,cw as f,mc as g,bm as x,dm as T,ap as I,c as w,cp as z,md as R,r as d,m as y,d as S}from"./index-BdmtnMtL.js";import{m as G}from"./rasterProjectionHelper-B2AiJLNF.js";import{b as P}from"./FlowSubView3D-DFMUYL3n.js";import{l as v}from"./LayerView3D-CrYT1gbB.js";import{p as O}from"./TiledLayerView3D-B3ZS3TRn.js";import{m as $,f as C,p as L,_ as E,g as F,s as U,l as _}from"./rasterUtils-D5mgoZhs.js";import{f as j}from"./ImageryTileLayerView-BJ-sTzLt.js";import{u as A}from"./LayerView-BKnaPVw2.js";import{i as V}from"./RefreshableLayerView-BFuquIK1.js";import{r as W}from"./drapedUtils-DXSyh8Xq.js";import"./dataUtils-CBwbMnmE.js";import"./utils-DUPmXVSM.js";import"./SubView3D-BSMsUtYk.js";import"./line-CxwftOpL.js";import"./rasterFieldUtils-64y26Z6E.js";import"./timeSupport-LzrBd8D8.js";import"./popupUtils-B6p4SpQd.js";const b={bandCount:3,minOutput:0,maxOutput:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class k{constructor(e,t,s=null,i=null){this.lij=e,this.type="raster-tile",this._memoryUsed=null,this._source=null,this._symbolizerParameters=null,this._bandIds=null,this._interpolation=null,this._dirty=!1,this._transformGrid=null,this.isRendereredSource=!1,this.symbolizerRenderer=null,this.rawPixelData=null,this.opacity=1,this.source=t,this.width=s||t.width,this.height=i||t.height}get source(){return this._source}set source(e){this._source=e,this._rasterTexture=o(this._rasterTexture),this._memoryUsed=null}get symbolizerParameters(){return this.isRendereredSource?{...b,maxCutOff:[1,1,1],factor:[1,1,1]}:this._symbolizerParameters||b}set symbolizerParameters(e){this._symbolizerParameters=e}get bandIds(){return this._bandIds}set bandIds(e){e!=null&&e.length>0?this._bandIds&&e.every(((t,s)=>{var i;return!!((i=this._bandIds)!=null&&i[s])&&t===this._bandIds[s]}))||(this._bandIds=e,this._dirty=!0):this._bandIds=null}get interpolation(){return this._interpolation||"nearest"}set interpolation(e){if(this._interpolation=e,this._rasterTexture!=null){const t=this._getRasterTextureInterpolation(e);this._rasterTexture.setSamplingMode(t==="bilinear"?f.LINEAR:f.NEAREST)}}get transformGrid(){return this._transformGrid}set transformGrid(e){this._transformGrid=e,this._transformGridTexture=o(this._transformGridTexture),this._memoryUsed=null}bind(e){return!!(this.source&&this.source.pixels&&this.source.pixels.length>0)&&((this._rasterTexture==null||this._dirty)&&this._updateRasterTexture(e,this.bandIds),this._rasterTexture!=null&&(this._updateColormapTexture(e),this.transformGrid&&this._transformGridTexture==null&&(this._transformGridTexture=$(e,this.transformGrid))),!0)}getUniforms(e){const{symbolizerParameters:t,transformGrid:s,width:i,height:a,opacity:h}=this,p=C(s,[i,a],[this.source.width,this.source.height],h),c=L(t.colormap,t.colormapOffset),n=this.symbolizerParameters.type==="stretch"?E(this.symbolizerParameters):null,u=this.symbolizerParameters.type==="hillshade"?F(this.symbolizerParameters):null,l=e.emptyTexture;return new g(p,c,n||u,this._rasterTexture??l,this._transformGridTexture??l,this._colormapTexture??l)}get isBilinearWithStretchColorRamp(){const{symbolizerParameters:e}=this;return this.interpolation==="bilinear"&&e.colormap!=null&&e.type==="stretch"}get memoryUsage(){if(this._memoryUsed==null){const e=[this._rasterTexture,this._transformGridTexture,this._colormapTexture];this._memoryUsed=e.map((t=>t!=null?t.descriptor.width*t.descriptor.height*4:0)).reduce(((t,s)=>t+s),0)}return this._memoryUsed}release(){return this._rasterTexture=o(this._rasterTexture),this._transformGridTexture=o(this._transformGridTexture),this._colormapTexture=o(this._colormapTexture),this.source=null,this.transformGrid=null,this.rawPixelData=null,!0}_updateRasterTexture(e,t){const s=this.source?this.source.extractBands(t):null;if(!(s!=null&&s.pixels&&s.pixels.length>0))return void(this._rasterTexture=o(this._rasterTexture));const i=t==null&&this.bandIds==null||t!=null&&this.bandIds!=null&&t.join("")===this.bandIds.join("");if(this._rasterTexture!=null&&i)return;this._rasterTexture=o(this._rasterTexture);const a=this._getRasterTextureInterpolation(this.interpolation);this._rasterTexture=U(e,s,a,this.isRendereredSource||this.hasStretchTypeNone())}hasStretchTypeNone(){return"stretchType"in this.symbolizerParameters&&this.symbolizerParameters.stretchType==="none"&&!this.symbolizerParameters.useGamma&&this.source.pixelType==="u8"}_getRasterTextureInterpolation(e){return this.symbolizerParameters.type==="lut"||e==="nearest"||e==="majority"||this.isBilinearWithStretchColorRamp?"nearest":"bilinear"}_updateColormapTexture(e){const t=this._colormap,s=this.symbolizerParameters.colormap;return s?t?s.length!==t.length||s.some(((i,a)=>i!==t[a]))?(this._colormapTexture=o(this._colormapTexture),this._colormapTexture=_(e,s),void(this._colormap=s)):void 0:(this._colormapTexture=_(e,s),void(this._colormap=s)):(this._colormapTexture=o(this._colormapTexture),void(this._colormap=null))}}let m=class extends j(V(O(v(A)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this._isAlignedMapTile=!0,this._flowSubView=null}initialize(){this.layer.increaseRasterJobHandlerUsage(),this.fullExtent==null&&this.addResolvingPromise(Promise.reject(new x("layerview:spatial-reference-incompatible","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})));const r=T((()=>{var e,t;return(t=(e=this.view)==null?void 0:e.basemapTerrain)==null?void 0:t.tilingSchemeLocked})).then((()=>{const e=this.view.basemapTerrain.tilingScheme,t=this.layer.tileInfo;this._isAlignedMapTile=["png","png24","png32","jpg","mixed"].includes(t.format)&&e.compatibleWith(t),this.tileInfo=this._isAlignedMapTile?t:e.toTileInfo(),this._updatingHandles.add((()=>[this.layer.renderer,this.layer.interpolation,this.layer.bandIds,this.layer.multidimensionalDefinition,this.layer.multidimensionalSubset,this.layer.rasterFunction,this.timeExtent]),(()=>this.refresh()))}));this.addResolvingPromise(r),this.addHandles(I((()=>this.layer.renderer),(e=>this._setSubView(e)),w))}destroy(){var r;this.layer.decreaseRasterJobHandlerUsage(),(r=this._flowSubView)==null||r.destroy()}_setSubView(r){if(this.layer.type==="wcs"||!z("enable-feature:3d-flow"))return;const e=(r==null?void 0:r.type)==="flow",t=this._flowSubView;e&&t!=null||(t==null||t.destroy(),this._flowSubView=e?new P({layerView:this}):null)}get _blankTile(){const r=document.createElement("canvas"),e=r.getContext("2d"),[t,s]=this.tileInfo.size;return r.width=t,r.height=s,e.clearRect(0,0,t,s),e.getImageData(0,0,t,s)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){var s,i;const r=this.layer.tileInfo,e=(s=this.tileInfo.lodAt(0))==null?void 0:s.scale,t=(i=this.layer.tileInfo.lodAt(r.lods.length-1))==null?void 0:i.scale;return this.levelRangeFromScaleRange(e,t)}_getFullExtent(){var r;return G(this.layer.serviceRasterInfo,((r=this.view.basemapTerrain)==null?void 0:r.spatialReference)??this.view.spatialReference)}async fetchTile(r,e){const t=this.tileInfo,s=this._canSymbolizeInWebGL(),i={tileInfo:t,requestRawData:s,signal:e.signal,timeExtent:this.timeExtent,requestAsImageElement:this._isAlignedMapTile,noClip:!1},{layer:a}=this,[h,p,c]=r,n=await a.fetchTile(h,p,c,i);if(n instanceof HTMLImageElement)return n;let u=n==null?void 0:n.pixelBlock;if(u==null)return this._blankTile;if(!s&&(u=await a.applyRenderer(n),u==null))return this._blankTile;const l=new k([h,p,c],u,t.size[0],t.size[1]);return s?(l.symbolizerRenderer=a.symbolizer.rendererJSON,l.symbolizerParameters=a.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(h)),l.transformGrid=n.transformGrid,l.bandIds=a.bandIds):(l.isRendereredSource=!0,l.bandIds=null),l.interpolation=a.interpolation,l}_getSymbolizerOptions(r){var t;const e=this.tileInfo.lodAt(r).resolution;return{pixelBlock:null,isGCS:((t=this.view.basemapTerrain)==null?void 0:t.spatialReference)!=null?this.view.basemapTerrain.spatialReference.isGeographic:this.view.spatialReference.isGeographic,resolution:{x:e,y:e},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(r){this._canSymbolizeInWebGL()&&JSON.stringify(r.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(r.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(r.lij[0])))}createFetchPopupFeaturesQueryGeometry(r,e){return W(r,e,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){var r;this.suspended||(await((r=this._flowSubView)==null?void 0:r.doRefresh()),this.emit("data-changed"))}isUpdating(){var r;return((r=this._flowSubView)==null?void 0:r.updating)??!1}_canSymbolizeInWebGL(){var a,h;const r=R(),{symbolizer:e}=this.layer,t=(a=e.lookup.colormapLut)==null?void 0:a.indexedColormap,s=!!((h=this.layer.rasterFunction)!=null&&h.hasClipFunction),i=t&&t.length>4*(r.maxTextureSize||4096);return e.canRenderInWebGL&&!i&&!s}get test(){}};d([y({readOnly:!0})],m.prototype,"_blankTile",null),d([y({readOnly:!0})],m.prototype,"imageFormatIsOpaque",null),d([y({readOnly:!0})],m.prototype,"hasMixedImageFormats",null),d([y({readOnly:!0})],m.prototype,"dataLevelRange",null),m=d([S("esri.views.3d.layers.ImageryTileLayerView3D")],m);const ae=m;export{ae as default};
