import{$ as p,gh as c,di as u}from"./index-CA3J3HgS.js";import{createMesh as l}from"./meshUtils-D5MuRcsy.js";import"./Mesh-BG021VrU.js";import"./MeshComponent-D0HHbq4l.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshTransform-DR-HazZn.js";import"./MeshVertexAttributes-CzAzKomn.js";import"./triangulationUtils-D4JmouXs.js";import"./deduplicate-B5p8P1WK.js";import"./vertexSpaceConversion-DbqlHqhJ.js";import"./vec4-CyEFJ9HU.js";import"./External-BSL8iFis.js";function S(a,o){const n=new Array,m=p.fromJSON(o.spatialReference);for(const e of o.features){const t=e.metadata,r=c(e.geometry);if(!t||!r){n.push(null);continue}r.spatialReference=m;const s=r.extent,f=l({layerView:a,nodeIndex:t.meta.node.index,featureIndex:t.index,extent:s,spatialReference:m});n.push(f),e.geometry=null}const i=u.fromJSON(o);for(let e=0;e<i.features.length;e++){const t=i.features[e],r=n[e];t.geometry=r}return i}export{S as processQueryGeometries};
