import{jM as y,bH as d,hv as l,z as S,cV as g,p as M,$ as N}from"./index-Ds3x37R4.js";import{q as E}from"./Mesh-BGQyaxwx.js";import{n as D,i as F}from"./External-Bx4hmd3V.js";import{n as T,i as I}from"./meshFeatureAttributes-DxRIfGXk.js";import"./MeshComponent-CI5_b_V3.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshTransform-BB-6Anqp.js";import"./MeshVertexAttributes-CA-J2eVs.js";import"./triangulationUtils-C7XMlhsz.js";import"./deduplicate-KKspL-e9.js";import"./vertexSpaceConversion-B71BKzIq.js";import"./vec4-CklyVFko.js";const $=()=>d.getLogger("esri.rest.support.meshFeatureSet");function j(e,s,t){const r=t.features;t.features=[],delete t.geometryType;const n=g.fromJSON(t);if(n.geometryType="mesh",!t.assetMaps)return n;const o=L(s,t.assetMaps),u=e.sourceSpatialReference??M.WGS84,f=t.globalIdFieldName,{outFields:a}=e,p=a!=null&&a.length>0?b(a.includes("*")?null:new Set(a)):()=>({});for(const i of r){const c=w(i,f,u,s,o);n.features.push(new N({geometry:c,attributes:p(i)}))}return n}function b(e){return({attributes:s})=>{if(!s)return{};if(!e)return s;for(const t in s)e.has(t)||delete s[t];return s}}function w(e,s,t,r,n){const o=e.attributes[s],u=n.get(o);if(u==null||!e.geometry)return null;const f=T(e.attributes,t,r.transformFieldRoles),a=S.fromJSON(e.geometry);a.spatialReference=t;const p=I(e.attributes,r.transformFieldRoles),i=t.isGeographic?"local":"georeferenced",c=O(u);return c?E.createWithExternalSource(f,c,{extent:a,transform:p,vertexSpace:i,unitConversionDisabled:!0}):E.createIncomplete(f,{extent:a,transform:p,vertexSpace:i})}var m;function L(e,s){const t=new Map;for(const r of s){const n=r.parentGlobalId;if(n==null)continue;const o=r.assetName,u=r.assetType,f=r.assetHash,a=r.assetURL,p=r.conversionStatus,i=r.seqNo,c=y(u,e.supportedFormats);if(!c){$().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${u}, but it does not list it as a supported type`);continue}const h=l(t,n,(()=>({files:new Map})));l(h.files,o,(()=>({name:o,type:u,mimeType:c,status:v(p),parts:[]}))).parts[i]={hash:f,url:a}}return t}function O(e){const s=Array.from(e.files.values()),t=new Array;for(const r of s){if(r.status!==m.COMPLETED)return null;const n=new Array;for(const o of r.parts){if(!o)return null;n.push(new D(o.url,o.hash))}t.push(new F(r.name,r.mimeType,n))}return{type:"service",assets:t}}function v(e){switch(e){case"COMPLETED":case"SUBMITTED":return m.COMPLETED;case"INPROGRESS":return m.PENDING;default:return m.FAILED}}(function(e){e[e.FAILED=0]="FAILED",e[e.PENDING=1]="PENDING",e[e.COMPLETED=2]="COMPLETED"})(m||(m={}));export{L as assetMapFromAssetMapsJSON,w as extractMesh,j as meshFeatureSetFromJSON};
