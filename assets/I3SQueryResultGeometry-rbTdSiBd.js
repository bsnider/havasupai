import{p as f,gh as c,cV as u}from"./index-Ds3x37R4.js";import{createMesh as l}from"./meshUtils-zjBr2VXE.js";import"./Mesh-BGQyaxwx.js";import"./MeshComponent-CI5_b_V3.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshTransform-BB-6Anqp.js";import"./MeshVertexAttributes-CA-J2eVs.js";import"./triangulationUtils-C7XMlhsz.js";import"./deduplicate-KKspL-e9.js";import"./vertexSpaceConversion-B71BKzIq.js";import"./vec4-CklyVFko.js";import"./External-Bx4hmd3V.js";function V(i,o){const n=new Array,a=f.fromJSON(o.spatialReference);for(const e of o.features){const t=e.metadata,r=c(e.geometry);if(!t||!r){n.push(null);continue}r.spatialReference=a;const s=r.extent,p=l({layerView:i,nodeIndex:t.meta.node.index,featureIndex:t.index,extent:s,spatialReference:a});n.push(p),e.geometry=null}const m=u.fromJSON(o);for(let e=0;e<m.features.length;e++){const t=m.features[e],r=n[e];t.geometry=r}return m}export{V as processQueryGeometries};
