import{Q as g,r,m as i,cB as u,d as y,a1 as m,a3 as b,a2 as j,a4 as U}from"./index-DtL3GvY-.js";let s=class extends g{constructor(n){super(n),this.container=null,this.ranges=null}readContainer(n,e){return{sourceId:e.sourceId,globalId:e.globalId}}readRanges(n,e){return[...e.gaps.map((t=>({firstUnit:t.start,numUnits:t.end-t.start+1,isGap:!0}))),...e.unitIdentifiers.map((t=>({firstUnit:t.firstUnit,numUnits:t.numUnits,isGap:!1,content:{sourceId:t.sourceId,globalId:t.globalId}})))]}};r([i({type:Object})],s.prototype,"container",void 0),r([u("container",["sourceId","globalId"])],s.prototype,"readContainer",null),r([i({type:[Object]})],s.prototype,"ranges",void 0),r([u("ranges",["gaps","unitIdentifiers"])],s.prototype,"readRanges",null),s=r([y("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")],s);async function h(n,e,t){const a=m(n),o=e.toJSON();e.objects&&(o.objects=JSON.stringify(e.objects));const d={...o,f:"json"},p=b({...a.query,...d}),c=j(p,{...t,method:"post"}),l=`${a.path}/unitIdentifiers/query`,{data:f}=await U(l,c);return f.objects.map((I=>s.fromJSON(I)))}export{h as queryUnitIdentifiers};
