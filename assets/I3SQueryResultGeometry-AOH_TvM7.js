import{$ as p,gh as c,di as u}from"./index-BdmtnMtL.js";import{createMesh as l}from"./meshUtils-CK_Fp61I.js";import"./Mesh-D9Ez16Ob.js";import"./MeshComponent-BqLrMv-C.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshTransform-CCEFHXur.js";import"./MeshVertexAttributes-BLIERfar.js";import"./triangulationUtils-BQabTsG9.js";import"./deduplicate-DlY1Xjvm.js";import"./vertexSpaceConversion-RE0iNRKJ.js";import"./vec4-C1MDKEa4.js";import"./External-ZqqM0FcS.js";function S(a,o){const n=new Array,m=p.fromJSON(o.spatialReference);for(const e of o.features){const t=e.metadata,r=c(e.geometry);if(!t||!r){n.push(null);continue}r.spatialReference=m;const s=r.extent,f=l({layerView:a,nodeIndex:t.meta.node.index,featureIndex:t.index,extent:s,spatialReference:m});n.push(f),e.geometry=null}const i=u.fromJSON(o);for(let e=0;e<i.features.length;e++){const t=i.features[e],r=n[e];t.geometry=r}return i}export{S as processQueryGeometries};
