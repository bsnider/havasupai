import{_ as D,i9 as S,pz as A,pA as m}from"./index-CxDa6KP7.js";function R(){return C??(C=(async()=>{const t=await D(()=>import("./basis_encoder-CRZ0Ieq5.js"),[]),e=await t.default({locateFile:a=>S(`esri/libs/basisu/${a}`)});return e.initializeBasis(),e})()),C}let C;function b(){return E??(E=(async()=>await(await D(()=>import("./dxt_encoder-DCjSSNVj.js"),[])).default({locateFile:e=>S(`esri/libs/dxtEncoder/${e}`)}))()),E}let E,X,B,c=null,o=null;class w{constructor(e,a){this.internalFormat=e,this.compressedTexture=a}}async function j(t){var a;let e;if(e=t.data instanceof ImageBitmap?U(t.data):G(t.data,t.width,t.height,t.components,t.needsFlip),t.hasS3TC){o||await g();const i=new Uint8Array(e.length);if(o!=null&&o.encode(e,t.width,t.height,t.preMultiplyAlpha,i)){const n=Q(i,!0),l=[i.buffer];return{result:new w((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.textureData)??null),transferList:l}}return{result:new w(null,null)}}if(t.hasETC){if(c||await M(),t.preMultiplyAlpha&&!o&&await g(),t.preMultiplyAlpha){const r=new Uint8ClampedArray(e.length);o==null||o.premultiply(new Uint8Array(e),t.width,t.height,r),e=r}const i=await x(e,t.width,t.height,t.hasMipmap),n=i?await F(i):null,l=((a=n==null?void 0:n.compressedTexture)==null?void 0:a.levels.map((r=>r.buffer)))||[];return{result:new w((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.compressedTexture)??null),transferList:l}}return{result:new w(null,null)}}async function M(){c||(c=await(X??(X=R())))}async function g(){o||(o=await(B??(B=b())))}async function x(t,e,a,i,n=255,l=0,r=!1,u=!1){if(!c)return null;const s=new c.BasisEncoder;s.setPerceptual(!u),s.setCheckForAlpha(!0),s.setForceAlpha(!1),s.setRenormalize(u),s.setMipGen(i),s.setMipSRGB(!u),s.setCreateKTX2File(!0),s.setKTX2SRGBTransferFunc(!u),s.setQualityLevel(n),s.setCompressionLevel(l);const d=new Uint8Array(t.byteLength);s.setSliceSourceImage(0,new Uint8Array(t),e,a,r);const f=s.encode(d),h=new Uint8Array(d.buffer,0,f),p=new c.KTX2File(new Uint8Array(h));return p.isValid()?(s.delete(),h):(p.close(),p.delete(),s.delete(),null)}async function F(t){if(!c)return new w(null,null);const e=new c.KTX2File(new Uint8Array(t));e.startTranscoding();const[a,i]=e.getHasAlpha()?[A.ETC2_RGBA,m.COMPRESSED_RGBA8_ETC2_EAC]:[A.ETC1_RGB,m.COMPRESSED_RGB8_ETC2],n=e.getLevels(),l=[];for(let r=0;r<n;r++)l.push(new Uint8Array(e.getImageTranscodedSizeInBytes(r,0,0,a))),e.transcodeImage(l[r],r,0,0,a,0,-1,-1);return e.close(),e.delete(),{internalFormat:i,compressedTexture:{type:"compressed",levels:l}}}function U(t){const e=new OffscreenCanvas(t.width,t.height),a=e.getContext("2d");return a.drawImage(t,0,0),a.getImageData(0,0,e.width,e.height).data}function G(t,e,a,i,n){const l=new Uint8ClampedArray(t).subarray(0,e*a*i);if(!n)return l;const r=new Uint8ClampedArray(l.length),u=e*i;for(let s=0;s<a;s++){const d=s*u,f=(a-s-1)*u;r.set(l.subarray(d,d+u),f)}return r}const O=31,v=1,I=2,P=3,L=4,z=7,K=21,k=131072;function T(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const $=T("DXT1"),V=T("DXT3"),H=T("DXT5");function Q(t,e){const a=new Int32Array(t.buffer,t.byteOffset,O);let i,n;switch(a[K]){case $:i=8,n=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case V:i=16,n=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case H:i=16,n=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let l=1,r=a[L],u=a[P];(3&r||3&u)&&(r=r+3&-4,u=u+3&-4);const s=r,d=u;let f,h;a[I]&k&&e!==!1&&(l=Math.max(1,a[z]));let p=t.byteOffset+a[v]+4;const y=[];for(let _=0;_<l;++_)h=(r+3>>2)*(u+3>>2)*i,f=new Uint8Array(t.buffer,p,h),y.push(f),p+=h,r=Math.max(1,r>>1),u=Math.max(1,u>>1);return{textureData:{type:"compressed",levels:y},internalFormat:n,width:s,height:d}}export{w as TextureCompressionWorkerOutput,j as compress,x as compressRGBADataToKTX2,F as createTextureDataKTX2,M as initializeBasisEncoder,g as initializeDXTEncoder};
