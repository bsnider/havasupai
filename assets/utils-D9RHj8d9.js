import{cC as C,cD as j,p as G,dF as O,bZ as R,ay as A,dG as D,dH as Y,dI as v,dJ as L,L as U,dK as S}from"./index-Ds3x37R4.js";import{$ as V}from"./utils-DIPV3OIx.js";import{m as E,B as _}from"./utils-DydmfvMV.js";let f=null;const P=/^(?<hh>([0-1][0-9])|([2][0-3])):(?<mm>[0-5][0-9])(:(?<ss>[0-5][0-9]))?([.](?<ms>\d+))?$/;function Z(e,t,n){return e.x<0?e.x+=t:e.x>n&&(e.x-=t),e}function W(e,t,n,i){const r=O(n)?R(n):null,o=r?Math.round((r.valid[1]-r.valid[0])/t.scale[0]):null;return e.map((l=>{const a=new A(l.geometry);return D(t,a,a),l.geometry=r?Z(a,o??0,i[0]):a,l}))}function X(e,t=18,n,i,r){const o=new Float64Array(i*r);t=Math.round(S(t));let l=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY;const F=Y(n);for(const{geometry:p,attributes:b}of e){const{x:g,y:c}=p,w=Math.max(0,g-t),N=Math.max(0,c-t),M=Math.min(r,c+t),x=Math.min(i,g+t),h=+F(b);for(let d=N;d<M;d++)for(let m=w;m<x;m++){const I=d*i+m,$=L(m-g,d-c,t)*h,u=o[I]+=$;l=Math.min(l,u),a=Math.max(a,u)}}return{min:l,max:a}}function k(e){const t=P.exec(e);if(!t)return null;const{hh:n,mm:i,ss:r,ms:o}=t.groups;return Number(n)*v.hours+Number(i)*v.minutes+Number(r)*v.seconds+Number(o||0)}async function ee(e,t,n=!0){if(!t)return[];const{field:i,field2:r,field3:o,fieldDelimiter:l,fieldInfos:a,timeZone:F}=e,p=i&&(a==null?void 0:a.find((u=>u.name.toLowerCase()===i.toLowerCase()))),b=!!p&&C(p),g=!!p&&V(p),c=e.valueExpression,w=e.normalizationType,N=e.normalizationField,M=e.normalizationTotal,x=[],h=e.viewInfoParams;let d=null,m=null;if(c){if(!f){const{arcadeUtils:u}=await j();f=u}f.hasGeometryOperations(c)&&await f.enableGeometryOperations(),d=f.createFunction(c),m=h?f.getViewInfo({viewingMode:h.viewingMode,scale:h.scale,spatialReference:new G(h.spatialReference)}):null}const I=e.fieldInfos,$=!(t[0]&&"declaredClass"in t[0]&&t[0].declaredClass==="esri.Graphic")&&I?{fields:I}:null;return t.forEach((u=>{const y=u.attributes;let s;if(c){const T=$?{...u,layer:$}:u,z=f.createExecContext(T,m,F);s=f.executeFunction(d,z)}else y&&(s=y[i],r?(s=`${E(s)}${l}${E(y[r])}`,o&&(s=`${s}${l}${E(y[o])}`)):typeof s=="string"&&n&&(g?s=s?new Date(s).getTime():null:b&&(s=s?k(s):null)));if(w&&typeof s=="number"&&isFinite(s)){const T=y&&parseFloat(y[N]);s=_(s,w,T,M)}x.push(s)})),x}function te(e){const t=e.field,n=e.normalizationType,i=e.normalizationField;let r;return n==="field"?r="(NOT "+i+" = 0)":n!=="log"&&n!=="natural-log"&&n!=="square-root"||(r=`(${t} > 0)`),r}function ne(e,t,n){const i=t!=null?e+" >= "+t:"",r=n!=null?e+" <= "+n:"";let o="";return o=i&&r?q(i,r):i||r,o?"("+o+")":""}function q(e,t){let n=e??"";return t!=null&&t&&(n=n?"("+n+") AND ("+t+")":t),n}function ie(e,t){if(e&&e.spatialRelationship!=="intersects")return new U(t,"Only 'intersects' spatialRelationship is supported for featureFilter")}function re(e,t,n){const i=B({layer:e,fields:t});if(i.length)return new U(n,"Unknown fields: "+i.join(", ")+". You can only use fields defined in the layer schema");const r=H({layer:e,fields:t});return r.length?new U(n,"Unsupported fields: "+r.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function B(e){const t=e.layer;return e.fields.filter((n=>!t.getField(n)))}function H(e){const t=e.layer;return e.fields.filter((n=>{const i=t.getFieldUsageInfo(n);return!i||!i.supportsStatistics}))}export{te as F,k as I,ie as M,ne as N,re as T,q as U,ee as b,X as w,W as x};
