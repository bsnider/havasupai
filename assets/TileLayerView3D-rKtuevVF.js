import{dj as n,bm as p,dk as h,at as m,r as s,m as l,d as f}from"./index-CA3J3HgS.js";import{l as u}from"./LayerView3D-JeQQWbeY.js";import{p as d}from"./TiledLayerView3D-Cu4g5dJz.js";import{i as c}from"./fetchTile-CiFEDwKj.js";import{d as y}from"./SublayerPopupHighlightHelper3D-Gn5IGptj.js";import{u as g}from"./LayerView-LfRtBo31.js";import{i as w}from"./RefreshableLayerView-G0vLJ6co.js";import{_ as x}from"./MapServiceLayerViewHelper-OnEj067e.js";import"./ImageHighlightHelper3D-BXzUl-43.js";import"./highlightUtils-4Y7MSmIZ.js";import"./drapedUtils-BzfEHRHA.js";import"./floorFilterUtils-MtPgm5NF.js";import"./sublayerUtils-D7vQ9ssr.js";import"./popupUtils-DN9oIyBS.js";let r=class extends w(d(u(g))){constructor(){super(...arguments),this.type="tile-3d"}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get tileInfo(){return this.layer.tileInfo}initialize(){var t,i;if(this.layer.type==="web-tile"){const e=(t=this.layer.fullExtent)==null?void 0:t.spatialReference,a=(i=this.layer.tileInfo)==null?void 0:i.spatialReference;if(e==null||a==null||!n(e,a)){const o=this.layer.originOf("fullExtent")==="defaults"||this.layer.fullExtent==null?"SceneView requires fullExtent to be specified by the user on WebTileLayer":"SceneView requires fullExtent to be specified in the same spatial reference as tileInfo on WebTileLayer";this.addResolvingPromise(Promise.reject(new p("layerview:incompatible-fullextent",o)))}}if(x(this,this.layer)){const e=new y({view:this.view,layerView:this,updatingHandles:this._updatingHandles});this._popupHighlightHelper=e,this.addHandles(h(e))}this._addTilingSchemeMatchPromise()}async fetchTile(t,i){return c(this,t,i)}async fetchPopupFeaturesAtLocation(t,i){var e;return((e=this._popupHighlightHelper)==null?void 0:e.fetchPopupFeaturesAtLocation(t,i))??[]}highlight(t,i){var e;return((e=this._popupHighlightHelper)==null?void 0:e.highlight(t,i))??m()}async doRefresh(){this.suspended||this.emit("data-changed")}};s([l()],r.prototype,"imageFormatIsOpaque",null),s([l()],r.prototype,"hasMixedImageFormats",null),s([l()],r.prototype,"layer",void 0),s([l()],r.prototype,"tileInfo",null),r=s([f("esri.views.3d.layers.TileLayerView3D")],r);const j=r;export{j as default};
