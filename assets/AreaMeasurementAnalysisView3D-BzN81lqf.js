import{fq as ke,aU as g,aV as ie,eG as B,fm as F,eJ as We,vO as Ze,n6 as et,FI as tt,AP as je,FJ as st,mX as ue,un as it,dj as nt,ue as Z,bh as pe,n7 as at,eW as N,FK as ne,kN as rt,FL as ce,eI as ot,fC as lt,bg as ge,fs as R,aW as ee,FM as ht,bd as dt,uq as ut,Dq as me,z8 as _e,FN as ye,FO as pt,um as fe,d_ as ct,FP as gt,mW as k,FQ as mt,e as de,ap as C,aq as ae,r as o,m as h,d as z,aN as _t,ej as ve,lt as yt,av as E,FR as ft,bW as vt,aL as X,FS as qe,xV as wt,vj as Vt,EN as St,EM as Pt,EP as Mt,EK as Lt,aZ as K,ER as we,Ft as $t,FT as Ve,ES as Ct,EV as bt,EW as Dt,_ as xt,EX as Se,EY as At,F1 as Ot,F2 as Rt,F3 as Gt,F4 as It,FU as Tt,F9 as Ft,rL as Et,Fa as zt,tA as Ht,Fb as I,pC as te,Fd as se,rR as Pe,Fi as Ut,Ff as kt,vU as Be,aO as J,Fg as Wt,aP as A,y$ as jt,aQ as Me,aR as Le,rH as qt,b8 as Bt,ba as $e,g2 as Nt,x2 as Q,f$ as re,BK as Xt,g0 as Ce,h6 as Kt,y4 as Jt,c as Qt,u as V,FV as Yt,iw as be,sX as Zt,y5 as es,mm as De,fa as ts,mp as ss,ab as xe,FW as is,h as ns,kj as as,fv as W,x$ as rs,ed as Ae,cQ as os,qj as Oe,sn as ls,FX as hs,FY as ds,el as us,xY as ps}from"./index-CxDa6KP7.js";import{o as cs,s as gs,m as ms,f as _s,d as ys}from"./analysisViewUtils-_EQZe8Dh.js";import{g as fs,j as vs,p as ws,m as Vs,h as Ss,e as oe,w as Re}from"./measurementUtils-DF-S5haV.js";import{t as Ps,c as Ms,d as T,f as Ge,a as Ie,e as Te}from"./ShadedColorMaterial.glsl-HO6n6kE6.js";import{E as le,p as Ne,P as Xe,b as Ls}from"./EditGeometryOperations-WraRpl3i.js";import{g as Ke}from"./quantityFormatUtils-kw3VC2-E.js";import{f as Fe,_ as $s,m as Cs}from"./Segment-CdDL8NgS.js";import{c as bs}from"./DefaultLayouts-BR-mRWct.js";import{r as Ds}from"./TriangleMaterial-BPVluRNo.js";import{h as xs}from"./lineStippleUtils-C89mzWlO.js";import{R as As}from"./SnappingVisualizer3D-BHUYOp7y.js";import{z as Os,B as Rs}from"./dragEventPipeline3D-LvpEme9V.js";import{c as Gs}from"./LaserlinePath.glsl-D6yN9oVO.js";import{i as Je,p as Is}from"./InteractiveToolBase-CkW_XXCD.js";import{o as Ts}from"./ToolIntersector-GgCigRKV.js";import{e as Fs}from"./SnappingContext-BV-op1kH.js";import{f as Es}from"./SnappingDragPipelineStep-Cv8NNDd_.js";import{a as zs}from"./SnappingManagerPool-CjDgONan.js";import{p as Hs}from"./SnappingOperation-b7fDahVF.js";import"./VisualElement-AaHnztFY.js";import"./line-BQqND8NX.js";import"./ColorMaterial.glsl-ChUUNbMA.js";import"./ExtendedLineVisualElement-BB24jHrD.js";import"./EngineVisualElement-CQwtNgcE.js";import"./PointVisualElement-qLIoUj7O.js";import"./PointSnappingHint-91JrtlDC.js";import"./dehydratedFeatureComparison-DArW5Yrl.js";function Ee(t,e,s,i,n){ke(j,t),ie(q,t,e),B(j,s,j,n),B(q,s,q,n),F(i,q,j),We(i,i)}const j=g(),q=g();class Us{get numVertices(){return this._length}get hasStagedVertex(){return this._lastCursorPoint!=null}constructor(e,s,i){this._sceneView=e,this._geodesicAreaMeasurementUtils=s,this._geodesicLengthMeasurementUtils=i,this.validMeasurement=!1,this.positionsWorld=[],this.positionsRender=[],this.positionsFittedWorld=[],this.positionsFittedRender=[],this.positionsGeodesic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=g(),this.areaCentroidRenderCoords=g(),this.geodesicAreaCentroidRenderCoords=g(),this.fittingMode=null,this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=g(),this._planeWorldCoords=Ze(),this._worldUp=g(),this._worldTangent=g(),this._frame=[g(),g(),g()],this._lastPathVersion=-1,this._lastCursorPoint=null,this._mode=null,this._tempU=g(),this._tempV=g(),this._tempVec3=g(),this._tempSphere=et();const n=tt(e.spatialReference);this._measurementSR=n,this._lengthMeasurementUnit=je(n)??"meters",this._areaMeasurementUnit=st(n)??"square-meters"}update(e,s,i,n,a,r){const l=this._lastPathVersion===e.version,d=s?s.equals(this._lastCursorPoint):this._lastCursorPoint==null,u=this._mode===a;return!(l&&!r&&u&&d)&&(this._lastPathVersion=e.version,this._lastCursorPoint=s,this._updateCursorSegmentLength(e,s),this._update(e,s,i,n,a),!0)}_update(e,s,i,n,a){const r=this._sceneView.renderSpatialReference,l=this._measurementSR,d=i.spatialReference;let u=e.numVertices;const p=!(s==null||s.equals(e.lastPoint)||u>2&&s.equals(e.firstPoint)||e.polygonIsClosed);p&&(u+=1);const c=!e.polygonIsClosed&&u>2,f=e.polygonIsClosed||c;this._resize(u);const _=ue(d),m=d!=null&&it(d)?d:null,v=m!=null&&nt(d,_),{positionsGeodesic:P,positionsWorld:H,positionsRender:U,positionsSpherical:L}=this,x=(M,b)=>{ks(i.elevationProvider,M),k(M,H[b],l),k(M,U[b],r),v&&(k(M,P[b],m),k(M,L[b],_),We(L[b],L[b]))};e.forEachVertexPosition(((M,b)=>x(M,b))),p&&x(s,u-1);const O=this._updatePathLengths(f);if(this.pathLength=this._length>1?Z(O,this._lengthMeasurementUnit):null,v){const M=this._updateGeodesicPathLengths(f,m);this.geodesicPathLength=M!=null&&this._length>1?M:null}else this.geodesicPathLength=null;if(this._updateMode(a),!f)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),void(this.validMeasurement=!1);this._updateAreaAndPerimeterLength(i,r,l,n),v&&this._updateGeodesicArea(i,m),this.validMeasurement=!0}getData(){return{validMeasurement:this.validMeasurement,numVertices:this.numVertices,hasStagedVertex:this.hasStagedVertex,positionsRender:this.positionsRender,positionsFittedWorld:this.positionsFittedWorld,positionsFittedRender:this.positionsFittedRender,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorld.length=e,this.positionsRender.length=e,this.positionsFittedWorld.length=e,this.positionsFittedRender.length=e,this.positionsGeodesic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorld.push(g()),this.positionsRender.push(g()),this.positionsFittedWorld.push(pe()),this.positionsFittedRender.push(g()),this.positionsGeodesic.push(g()),this.positionsSpherical.push(g()),this.positionsStereographic.push(pe()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const s=this.positionsWorld,i=this.pathSegmentLengths;let n=0;const a=this._length;for(let r=0;r<a;++r){const l=i[r]=at(s[r],s[(r+1)%a]);(r<a-1||e)&&(n+=l)}return n}_updateGeodesicPathLengths(e,s){const i=this.positionsGeodesic,n=this.geodesicPathSegmentLengths;let a=0;const r=this._length;for(let l=0;l<r;++l){const d=this._geodesicLengthMeasurementUtils.geodesicDistance(i[l],i[(l+1)%r],s);if(d==null)return null;const u=N(d,"meters").value,p=n[l]=u;(l<r-1||e)&&(a+=p)}return Z(a,"meters")}_updateAreaAndPerimeterLength(e,s,i,n){const a=e.renderCoordsHelper,r=this.positionsWorld,l=this.positionsRender,d=this.positionsFittedWorld,u=this.positionsFittedRender,p=this._planeWorldCoords,c=this._centroidRenderCoords;ne(l,c),a.worldUpAtPosition(c,this._worldUp),a.worldBasisAtPosition(c,rt.X,this._worldTangent),Ee(c,this._worldUp,s,this._worldUp,i),Ee(c,this._worldTangent,s,this._worldTangent,i),r.length>2&&fs(r,p),this.fittingMode=this._selectFittingMode(p,r,this._worldUp,n);let f=0;if(this.fittingMode==="horizontal"){let L=-1/0;l.forEach(((x,O)=>{const M=a.getAltitude(l[O]);M>L&&(L=M,f=O)}))}const _=r[f];let m=p,v=this._worldTangent;this.fittingMode==="horizontal"?m=this._worldUp:this.fittingMode==="vertical"&&(m=this._tempVec3,v=this._worldUp,ce(p,this._worldUp,m)),ke(this._frame[2],m),ce(v,m,this._frame[0]),ot(this._frame[1],this._frame[0],this._frame[2]),lt(this._frame[1],this._frame[1]);const P=this._tempVec3,H=this._tempU,U=this._tempV;for(let L=0;L<this._length;++L){const x=d[L],O=u[L];F(P,r[L],_),ge(x,R(this._frame[0],P),R(this._frame[1],P)),ee(H,this._frame[0],x[0]),ee(U,this._frame[1],x[1]),ie(P,H,U),ie(P,P,_),B(P,i,O,s)}this.perimeterLength=this._length>0?this._updatePerimeterLengths():null,ne(u,this.areaCentroidRenderCoords),B(this.areaCentroidRenderCoords,s,this.areaCentroidWorldCoords,i),this._updateIntersectingSegments(),this.area=this.intersectingSegments.size===0?this._computeArea():null}_updateGeodesicArea(e,s){const{renderCoordsHelper:i,spatialReference:n}=e,{positionsSpherical:a,positionsStereographic:r}=this,l=this._tempVec3,d=vs(a,l);if(!d)return void(this.geodesicArea=null);const u=this._tempU,p=this._tempV;ht(l,u,p);for(let c=0;c<this._length;++c){const f=R(a[c],u),_=R(a[c],p),m=R(a[c],l);ge(r[c],f/m,_/m)}ee(l,l,dt(n).radius),i.toRenderCoords(l,ue(n),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=d&&this.geodesicIntersectingSegments.size===0?this._computeGeodesicArea(s):null}_updatePerimeterLengths(){const e=this.positionsFittedWorld,s=this.perimeterSegmentLengths;let i=0;for(let n=0;n<this._length;++n)i+=s[n]=ut(e[n],e[(n+1)%this._length]);return Z(i,this._lengthMeasurementUnit)}_updateIntersectingSegments(){const e=this.positionsFittedWorld,s=this.intersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let n=i+2;n<this._length;++n){if((n+1)%this._length===i)continue;const a=e[i],r=e[(i+1)%this._length],l=e[n],d=e[(n+1)%this._length];me(a,r,l,d)&&(s.add(i),s.add(n))}}_computeArea(){const e=this.positionsFittedWorld,s=this.triangleIndices=_e(ye(e));let i=0;for(let n=0;n<s.length;n+=3)i+=pt(e[s[n]],e[s[n+1]],e[s[n+2]]);return fe(i,this._areaMeasurementUnit)}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,s=this.geodesicIntersectingSegments;s.clear();for(let i=0;i<this._length;++i)for(let n=i+2;n<this._length;++n){if((n+1)%this._length===i)continue;const a=e[i],r=e[(i+1)%this._length],l=e[n],d=e[(n+1)%this._length];me(a,r,l,d)&&(s.add(i),s.add(n))}}_computeGeodesicArea(e){const s=this.positionsGeodesic,i=this.positionsStereographic,n=this.geodesicTriangleIndices=_e(ye(i));let a=0;for(let r=0;r<n.length;r+=3){const l=ws(s[n[r]],s[n[r+1]],s[n[r+2]],e,this._geodesicAreaMeasurementUtils);if(l==null)return null;a+=N(l,"square-meters").value}return fe(a,"square-meters")}_selectFittingMode(e,s,i,n){const a=s.map((p=>Math.abs(Vs(e,p)))).reduce(((p,c)=>Math.max(p,c)),0);Ss(s,this._tempSphere);const r=a/(2*this._tempSphere[3]),l=r<n.maxRelativeErrorCoplanar,d=r<n.maxRelativeErrorAlmostCoplanar;let u="horizontal";return l?u="oblique":d&&(u=Math.abs(R(i,e))>Math.cos(ct(n.verticalAngleThreshold))?"horizontal":"vertical"),u}_updateCursorSegmentLength(e,s){var n;const i=e.lastPoint;e.isValidPolygon||i==null||s==null?(this.geodesicStagedSegmentLength=null,this.stagedSegmentLength=null):(this.geodesicStagedSegmentLength=this._geodesicLengthMeasurementUtils.geodesicDistanceBetweenPoints(i,s),this.stagedSegmentLength=(n=gt(i,s))==null?void 0:n.direct)}_updateMode(e){if(e===oe.Auto){this.actualMeasurementMode="euclidean";let s=0;this.geodesicPathLength!=null&&(s+=this.geodesicPathLength.value),s>Ws&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=e===oe.Euclidean?"euclidean":"geodesic";this.geodesicPathLength==null&&(this.actualMeasurementMode="euclidean"),this._mode=e}}function ks(t,e){e.hasZ||(e.z=mt(t,e,"ground")??0)}const Ws=1e5;let D=class extends de{constructor(t){super(t)}initialize(){this._measurementDataManager=new Us(this.view,this.geodesicAreaMeasurementUtils,this.geodesicLengthMeasurementUtils),this.addHandles([this.analysisViewData.path.on("change",(()=>this._update())),C((()=>this.analysisViewData.stagedPoint),(()=>this._update()),ae),C((()=>this.analysisViewData.mode),(()=>this._update()),ae)]),this._update()}_update(t=!1){const{analysisViewData:e,view:s}=this,i={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80};this._measurementDataManager.update(e.path,e.stagedPoint,s,i,e.mode,t)&&(e.measurementData=this._measurementDataManager.getData())}};o([h({constructOnly:!0})],D.prototype,"view",void 0),o([h({constructOnly:!0})],D.prototype,"analysis",void 0),o([h({constructOnly:!0})],D.prototype,"analysisViewData",void 0),o([h({constructOnly:!0})],D.prototype,"geodesicAreaMeasurementUtils",void 0),o([h({constructOnly:!0})],D.prototype,"geodesicLengthMeasurementUtils",void 0),D=o([z("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],D);let $=class extends _t.EventedAccessor{constructor(e={}){super(e),this._version=0,this._internalGeometryChange=!1,this._extent=ve()}set areaMeasurement(e){this._set("areaMeasurement",e),e!=null&&this.view!=null&&this._initialize(e,this.view)}set view(e){this._set("view",e),e!=null&&this.areaMeasurement!=null&&this._initialize(this.areaMeasurement,e)}get constructed(){return this.areaMeasurement!=null&&this.view!=null}get version(){return this._version}get isEmptyPolygon(){return!this.constructed||this._editGeometry.components.length===0}get isValidPolygon(){return this.constructed&&this.polygonIsClosed}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=ve(this._extent);return this.forEachVertex((s=>{yt(e,s.pos)})),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,s){this.removeAllHandles(),this.addHandles(C((()=>e.geometry),(()=>{this._updateEditGeometryFromModelGeometry(e,s)}),E)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("polygonIsClosed"),this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,s){if(this._version++,this._internalGeometryChange)return;this.removeHandles("EditGeometry");let i=e.geometry;if(i!=null){const n=ft(i,s.spatialReference);n==null&&Ps(e,i.spatialReference,vt.getLogger(this)),i=n}this._editGeometryOperations=i!=null?le.fromGeometry(i,s.state.viewingMode):new le(new Ne("polygon",Xe(!0,!1,s.spatialReference)),s.state.viewingMode),this._makeDirty(!0),this.emit("change"),this.addHandles(this._editGeometry.on("change",(n=>{this._makeDirty(n.addedVertices!=null||n.removedVertices!=null),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1})),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex((s=>{e.push(s)})),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get polygonIsClosed(){return this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get firstPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getFirstVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||this._editGeometry.components.length===0||this._editGeometry.components[0].vertices.length===0)return null;const s=this._editGeometry.components[0].vertices[0];let i=s;do{if(i.index===e)return i;i=i.rightEdge.rightVertex}while(i!==s&&i!=null);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const s=this._editGeometry.coordinateHelper;this.forEachVertex(((i,n)=>{s.vectorToPoint(i.pos,ze),e(ze,n)}))}clear(){this.areaMeasurement!=null&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(this._editGeometry.components.length===0){const i=this.view;this._editGeometry.components.push(new Ls(i.spatialReference,i.state.viewingMode))}const s=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),s}close(){if(!this.constructed||this._editGeometry.components.length===0)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,s=""){let i=!1;if(this._editGeometry.components.forEach((n=>{n.iterateVertices((a=>{a===e&&(i=!0)}))})),!i)throw new Error(`vertex doesnt exist ${s}`);return i}setVertexPosition(e,s){if(!this.constructed)return null;const i=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(s));return this.emit("change"),i}equals(e){if(this.numVertices!==e.numVertices)return!1;let s=!0;return this.forEachVertexPosition(((i,n)=>{const a=e.getVertexPositionAsPointFromIndex(n);i.equals(a)||(s=!1)})),!!s}};o([h({value:null})],$.prototype,"areaMeasurement",null),o([h({value:null})],$.prototype,"view",null),o([h()],$.prototype,"isEmptyPolygon",null),o([h()],$.prototype,"isValidPolygon",null),o([h()],$.prototype,"extent",null),o([h()],$.prototype,"spatialReference",null),o([h()],$.prototype,"numVertices",null),o([h()],$.prototype,"polygonIsClosed",null),$=o([z("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementPathHelper")],$);const ze=new X;function he(t,e){return N(t,qe(t.value,t.unit,e))}function He(t,e){return N(t,Qe(t,e))}function Qe(t,e){const s=js(e);return wt(t.value,t.unit,s)}function js(t){switch(t){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-nautical-miles":return"nautical-miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}function Ye(t){const e=new Vt,{vertex:s,fragment:i,varyings:n}=e;return e.fragment.include(St,t),e.include(Pt,t),e.include(Mt,t),Lt(s,t),e.attributes.add(K.POSITION,"vec3"),e.attributes.add(K.UV0,"vec2"),n.add("vUV","vec2"),n.add("vpos","vec3"),s.main.add(we`vUV = uv0;
vpos = position;
forwardViewPosDepth((view * vec4(position, 1.0)).xyz);
gl_Position = proj * view * vec4(position, 1.0);`),i.uniforms.add(new $t("size",(a=>a.size))),i.uniforms.add(new Ve("color1",(a=>a.color1))),i.uniforms.add(new Ve("color2",(a=>a.color2))),i.include(Ct),i.main.add(we`discardByTerrainDepth();
vec2 uvScaled = vUV / (2.0 * size);
vec2 uv = fract(uvScaled - 0.25);
vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
float t = mix(abs(ab.x + ab.y), 0.5, fade);
fragColor = mix(color2, color1, t);
outputColorHighlightOID(fragColor, vpos, fragColor.rgb);`),e}const qs=Object.freeze(Object.defineProperty({__proto__:null,build:Ye},Symbol.toStringTag,{value:"Module"}));class Bs extends bt{constructor(e,s){super(e,s,new Dt(qs,(()=>xt(()=>Promise.resolve().then(()=>di),void 0))))}initializePipeline(e){const{oitPass:s,transparent:i,polygonOffset:n,output:a}=e,r=s===Se.NONE,l=s===Se.FrontFace;return At({blending:i?Tt(s):null,depthTest:{func:It(s)},depthWrite:Gt(e),drawBuffers:Rt(s,a),colorWrite:Ot,polygonOffset:r||l?n?Ns:null:{factor:-1,units:-25}})}}const Ns={factor:0,units:-25};class G extends Ft{constructor(){super(...arguments),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.terrainDepthTest=!1,this.cullAboveTerrain=!1,this.textureCoordinateType=Et.None,this.emissionSource=zt.None,this.output=Ht.Color,this.occlusionPass=!1,this.objectAndLayerIdColorInstanced=!1,this.overlayEnabled=!1,this.draped=!1,this.snowCover=!1}get discardInvisibleFragments(){return this.transparent&&this.writeDepth}}o([I()],G.prototype,"transparent",void 0),o([I()],G.prototype,"writeDepth",void 0),o([I()],G.prototype,"polygonOffset",void 0),o([I()],G.prototype,"terrainDepthTest",void 0),o([I()],G.prototype,"cullAboveTerrain",void 0);class Xs extends Ds{constructor(e){super(e,Js),this._configuration=new G,this.produces=new Map([[te.OPAQUE_MATERIAL,s=>se(s)&&!this.transparent],[te.TRANSPARENT_MATERIAL,s=>se(s)&&this.transparent&&this.parameters.writeDepth],[te.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,s=>se(s)&&this.transparent&&!this.parameters.writeDepth]])}getConfiguration(e,s){return super.getConfiguration(e,s,this._configuration),this._configuration.transparent=this.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.oitPass=s.oitPass,this._configuration.terrainDepthTest=s.terrainDepthTest,this._configuration.cullAboveTerrain=s.cullAboveTerrain,this._configuration}get visible(){return this.parameters.color1[3]>=Pe||this.parameters.color2[3]>=Pe}get transparent(){return this.parameters.color1[3]<1||this.parameters.color2[3]<1}createGLMaterial(e){return new Ks(e)}createBufferWriter(){return new Ut(bs)}}class Ks extends Wt{beginSlot(e){return this.getTechnique(Bs,e)}}class Js extends kt{constructor(){super(...arguments),this.size=Be(1,1),this.color1=J(.75,.75,.75,1),this.color2=J(.5,.5,.5,1),this.writeDepth=!0,this.polygonOffset=!1}}class Qs extends Ms{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=A.OccludeAndTransparent,this._geometry=null,this._size=Be(1,1),this._color1=J(1,.5,0,.5),this._color2=J(1,1,1,.5),this.applyProperties(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){jt(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){Me(e,this._color1)||(Le(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){Me(e,this._color2)||(Le(this._color2,e),this._updateMaterial())}_updateMaterial(){var e;(e=this._checkerBoardMaterial)==null||e.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new Xs({size:this._size,color1:this._color1,color2:this._color2,writeDepth:!1,polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:this.isDecoration})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachMaterial(e){e(this._checkerBoardMaterial)}createGeometries(e){if(this._geometry==null||this._checkerBoardMaterial==null)return;const s=Ys;qt(s,this.transform);const i=this._geometry,n=[],a=g();i.position.forEach((d=>{F(a,d,s),n.push(a[0],a[1],a[2])}));const r=[];i.uv.forEach((d=>{r.push(d[0],d[1])}));const l=new Bt(this._checkerBoardMaterial,[[K.POSITION,new $e(n,i.triangleIndices,3,!0)],[K.UV0,new $e(r,i.triangleIndices,2,!0)]]);e.addGeometry(l)}}const Ys=g();let S=class extends de{get _parameters(){const{accentColor:t,textColor:e}=this.view.effectiveTheme,s=Nt(t),i=Q(t,.5),n=Q(re(t),.5),a=re(e,Xt.Low);return{accentColor:s,transparentAccentColor:i,transparentContrastColor:n,intersectingLineColor:[1,.2,0,1],textColor:e,textBackgroundColor:Ce(a,.6),textCalloutColor:Ce(a,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){const t=this.view.renderCoordsHelper.spatialReference;return je(t)??"meters"}get testData(){}constructor(t){super(t),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=g(),this._originTransform=Kt(),this.messages=null,this.viewData=ti,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:t,_parameters:e,view:s}=this;this._path=new T({view:s,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:!0}),this._intersectedPath=new T({view:s,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:!0}),this._perimeter=new T({view:s,attached:!0,width:e.perimeterLineWidth,polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:!0}),this._intersectedPerimeter=new T({view:s,attached:!0,width:e.perimeterLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:!0}),this._projectionLines=new T({view:s,attached:!0,width:e.projectionLineWidth,stipplePattern:xs(e.projectionLineStippleSize),polygonOffset:!0,renderOccluded:A.OccludeAndTransparent,isDecoration:!0}),this._measurementArea=new Qs({view:s,attached:!0,isDecoration:!0});const i={attached:!0,view:s,isDecoration:!0};this._areaLabel=new Fe({...i,fontSize:Y.Large}),this._perimeterLengthLabel=new Fe({...i,fontSize:Y.Small}),this.addHandles([C((()=>[t.mode,this.visible,t.unit,t.measurementData,t.stagedPoint]),(()=>this._update()),E),C((()=>{var n;return(n=s.state)==null?void 0:n.camera}),(()=>this._updateLabels()),E),Jt((()=>this._updateMessageBundle())),C((()=>this._parameters),(({accentColor:n,transparentAccentColor:a,transparentContrastColor:r,textColor:l,textBackgroundColor:d,textCalloutColor:u})=>{const{_path:p,_intersectedPath:c,_perimeter:f,_projectionLines:_,_measurementArea:m,_areaLabel:v,_perimeterLengthLabel:P}=this;p.color=n,c.color=n,f.color=n,_.color=n,m.color1=a,m.color2=r,v.textColor=l,v.backgroundColor=d,v.calloutColor=u,P.textColor=l,P.backgroundColor=d,P.calloutColor=u}),Qt)]),this._updateMessageBundle()}destroy(){this._measurementArea=V(this._measurementArea),this._path=V(this._path),this._intersectedPath=V(this._intersectedPath),this._perimeter=V(this._perimeter),this._intersectedPerimeter=V(this._intersectedPerimeter),this._areaLabel=V(this._areaLabel),this._perimeterLengthLabel=V(this._perimeterLengthLabel),this._projectionLines=V(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:t},analysisViewData:e}=this;t!=null&&(this._updateViewData(t,e.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(t,e){const s=t.validMeasurement,i=t.actualMeasurementMode==="geodesic",n=i?t.geodesicArea:t.area;let a=1;if(n){const l=he(n,this.analysisViewData.unit);a=Yt(Math.sqrt(l.value)/Math.sqrt(300)),a*=Math.sqrt(be(1,l.unit,"square-meters")),a=be(a,"meters",this._renderUnits)}const r={validMeasurement:s,numVertices:t.numVertices,hasStagedVertex:t.hasStagedVertex,path:e,mode:t.actualMeasurementMode,positionsRender:t.positionsRender,positionsFittedWorld:t.positionsFittedWorld,positionsFittedRender:t.positionsFittedRender,intersectingSegments:i?t.geodesicIntersectingSegments:t.intersectingSegments,triangleIndices:i?t.geodesicTriangleIndices:t.triangleIndices,areaCentroid:i?t.geodesicAreaCentroidRenderCoords:t.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:i?t.geodesicArea:t.area,pathLength:i?t.geodesicPathLength:t.pathLength,perimeterLength:t.perimeterLength,checkerSize:a};this._set("viewData",r)}_updateOrigin(){const t=this.viewData;ne(t.positionsRender,this._origin),Zt(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(t){const e=this.viewData,s=this.view.renderCoordsHelper.spatialReference,i=e.mode,n=[],a=[],r=[],l=e.numVertices,d=e.validMeasurement?l:l-1;for(let p=0;p<d;++p){const c=e[t][p],f=e[t][(p+1)%l];let _=null;switch(i){case"euclidean":_=new Cs(c,f);break;case"geodesic":_=new $s(c,f,s)}e.intersectingSegments.has(p)?r.push(_):a.push(_),n.push(_)}let u=null;return e.validMeasurement&&e.hasStagedVertex&&d>=2?u=n[n.length-2]:e.hasStagedVertex&&d>=1&&(u=n[n.length-1]),{all:n,nonIntersecting:a,intersecting:r,stagedSegment:u}}_updatePathSegments(){const{visible:t}=this,e=this._createSegments("positionsRender");this._path.setGeometryFromSegments(e.nonIntersecting,this._origin),this._path.visible=t,this._intersectedPath.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPath.visible=t,this._pathSegments=e.all}_updatePerimeterSegments(){const t=this.visible&&this.viewData.mode==="euclidean"&&this.viewData.path.numVertices>2,e=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(e.nonIntersecting,this._origin),this._perimeter.visible=t,this._intersectedPerimeter.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPerimeter.visible=t,this._perimeterSegments=e.all}_updateArea(){const t=this.viewData;switch(t.mode){case"euclidean":this._updateAreaEuclidean(t);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(t){const e=this.visible;t.validMeasurement&&t.intersectingSegments.size===0&&t.triangleIndices?(this._measurementArea.geometry={uv:t.positionsFittedWorld,position:t.positionsFittedRender,triangleIndices:t.triangleIndices},this._measurementArea.size=[t.checkerSize,t.checkerSize],this._measurementArea.visible=e):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const t=this.viewData,e=this.visible,s=t.mode,i=t.numVertices;if(i>0&&t.validMeasurement&&s==="euclidean"){const n=[];for(let a=0;a<i;++a){const r=g();F(r,t.positionsRender[a],this._origin);const l=g();F(l,t.positionsFittedRender[a],this._origin),n.push([r,l])}this._projectionLines.geometry=n,this._projectionLines.visible=e}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:t}=this,{area:e,path:s}=t;if(!s)return;const i=this.visible,n=this._areaLabel,a=this._perimeterLengthLabel,r=t.validMeasurement;n.visible=!0,a.visible=!0;let l=!1;const d=Zs(this.messages,e,this.analysisViewData.unit);if(d!=null&&i&&(n.geometry={type:"point",point:t.areaCentroid},n.text=d,l=t.validMeasurement&&t.intersectingSegments.size===0),this._set("areaLabel",d),i&&r&&t.intersectingSegments.size===0){const u=t.mode==="geodesic",p=u?t.pathLength:t.perimeterLength,c=ei(this.messages,p,this.analysisViewData.unit);this._set("perimeterLengthLabel",c),a.distance=this._parameters.labelDistance,a.anchor="top",a.text=c;let f=!0;for(let _=0;_<t.numVertices;++_){const m=(t.perimeterLengthLabelSegmentIndex+_)%t.numVertices,v=u?this._pathSegments[m]:this._perimeterSegments[m];if(f=!0,a.geometry={type:"segment",segment:v,sampleLocation:"center"},!a.overlaps(this._areaLabel))break;f=!1}a.visible=f}else a.visible=!1;n.visible=l}_updateMessageBundle(){this.loadingMessages=!0,es("esri/core/t9n/Units").then((t=>{this.messages=t,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))}};function Zs(t,e,s){return t&&e&&Ke(t,e,qe(e.value,e.unit,s))}function ei(t,e,s){return t&&e&&Ke(t,e,Qe(e,s))}var Y;o([h()],S.prototype,"_parameters",null),o([h()],S.prototype,"view",void 0),o([h()],S.prototype,"messages",void 0),o([h()],S.prototype,"analysis",void 0),o([h()],S.prototype,"viewData",void 0),o([h()],S.prototype,"analysisViewData",void 0),o([h({readOnly:!0})],S.prototype,"areaLabel",void 0),o([h({readOnly:!0})],S.prototype,"perimeterLengthLabel",void 0),o([h()],S.prototype,"loadingMessages",void 0),o([h()],S.prototype,"visible",null),o([h()],S.prototype,"_renderUnits",null),S=o([z("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],S),(function(t){t[t.Small=12]="Small",t[t.Large=16]="Large"})(Y||(Y={}));const ti={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};class si{constructor(e,s=null){this.screenPoint=e,this.result=s}}class ii{constructor(e,s){this.scenePoint=e,this.mapPoint=s}}class ni{constructor(e){this.vertexManipulators=[],this._destroyed=!1,this._isManipulatorsOwner=!0,this._visible=!0,this._listenerHandles=null,this._tempHandlePosition=g();const{analysisViewData:s,manipulators:i,toolState:n,view:a,visible:r}=e;this._analysisViewData=s,this._toolState=n,i!=null?(this._manipulators=i,this._isManipulatorsOwner=!1):this._manipulators=new Je,this._view=a,this._intersector=Ts(a.state.viewingMode);const l=Ge(this._handleColor),d=[new Ie(De(l,1,32,32))],u=new Te({view:a,renderObjects:d});u.available=!1,u.radius=Ue,u.interactive=!1,this._manipulators.add(u),this._cursorManipulator=u,this._cursorManipulatorMaterial=l,this._laserLine=new Gs({view:a,attached:!0,style:{glowWidth:ri,glowFalloff:oi,innerWidth:li},isDecoration:!0}),this._updateVisibility(r??!0)}destroy(){this._listenerHandles=V(this._listenerHandles),this._isManipulatorsOwner?this._manipulators=V(this._manipulators):this._manipulators=null,this._laserLine=V(this._laserLine),this._destroyed=!0}get destroyed(){return this._destroyed}get visible(){return this._visible}set visible(e){e?this.show():this.hide()}get testData(){}show(){this._setVisibility(!0)}hide(){this._setVisibility(!1)}_setVisibility(e){this._destroyed||this._visible===e||this._updateVisibility(e)}_updateVisibility(e){this._visible=e,this._laserLine.visible=e,e?(this._initializeListeners(),this._updateAll()):(this._destroyListeners(),this.vertexManipulators.forEach((({manipulator:s})=>this._removeVertexManipulator(s))),this.vertexManipulators=[],this._view.cursor=null)}vertexHandleAt(e,s){const i=this._manipulators.intersect(e,s);return i==null?void 0:i.metadata}pick(e){const s=this._view.spatialReference,i=ts(e.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i,this._intersector);const n=this._intersector.results.min,a=g();if(!n.getIntersectionPoint(a))return null;const r=this._view.renderCoordsHelper.fromRenderCoords(a,new X({spatialReference:s}));return r==null?null:new ii(a,r)}_updateAll(){this._visible&&(this._updateVertexManipulators(),this._updateLaserLine())}_createVertexManipulator(){const e=Ge(this._handleColor),s=[new Ie(De(e,1,32,32))],i=new Te({view:this._view,renderObjects:s});return i.radius=Ue,this._manipulators.add(i),{manipulator:i,material:e}}_removeVertexManipulator(e){this._manipulators.remove(e)}_updateVertexManipulators(){const{viewData:e}=this._analysisViewData,s=this._analysisViewData.path?this._analysisViewData.path.vertices:[],i=this.vertexManipulators;ai(i,s.length,(()=>this._createVertexManipulator()),(({manipulator:n})=>this._removeVertexManipulator(n))),i.forEach((({manipulator:n},a)=>{n.metadata=s[a],n.renderLocation=e.positionsRender[a],n.cursor=a===0&&this._toolState.polygonState==="drawing"?"crosshair":null})),this._toolState.polygonState==="drawing"&&this._analysisViewData.stagedPoint!=null?(this._cursorManipulator.available=!0,this._cursorManipulator.location=this._analysisViewData.stagedPoint):this._cursorManipulator.available=!1}get _handleColor(){return Q(this._view.effectiveTheme.accentColor,.5)}_getFocusPoint(){const{lastDraggedVertex:e}=this._analysisViewData;switch(this._toolState.polygonState){case"drawing":return this._analysisViewData.stagedPoint!=null?this._analysisViewData.stagedPoint:e!=null?this._analysisViewData.path.getVertexPositionAsPoint(e):this._analysisViewData.path.lastPoint;case"editing":return e!=null?this._analysisViewData.path.getVertexPositionAsPoint(e):null;default:return this._analysisViewData.stagedPoint}}_updateLaserLine(){const e=this._toolState.polygonState!=="measured"&&this._toolState.active,s=this._getFocusPoint();if(e&&s!=null){const i=this._tempHandlePosition;this._view.renderCoordsHelper.toRenderCoords(s,i),this._laserLine.heightManifoldTarget=i}else this._laserLine.heightManifoldTarget=null}_initializeListeners(){this._listenerHandles=new ss,this._listenerHandles.add([C((()=>this._toolState.polygonState),(()=>this._updateLaserLine())),C((()=>this._analysisViewData.viewData),(()=>this._updateAll()),ae),C((()=>({lastDraggedVertex:this._analysisViewData.lastDraggedVertex,cursorPoint:this._analysisViewData.stagedPoint})),(()=>this._updateLaserLine())),C((()=>this._toolState.active),(()=>this._updateAll())),C((()=>this._view.effectiveTheme.accentColor),(e=>{const s=Q(e,.5);for(const{material:d}of this.vertexManipulators)d.setParameters({color:s});this._cursorManipulatorMaterial.setParameters({color:s});const i=xe.toUnitRGB(e),n=xe.toUnitRGB(re(e)),a=.75*e.a,r=this._laserLine,l=r.style;r.style={...l,glowColor:i,innerColor:n,globalAlpha:a}}),{initial:!0,equals:is})])}_destroyListeners(){this._listenerHandles=V(this._listenerHandles)}}function ai(t,e,s,i){for(;t.length<e;)t.push(s());if(i)for(;t.length>e;)i(t.pop());else t.length=e}const ri=8,oi=8,li=1,Ue=5;let w=class extends cs{constructor(t){super(t),this._updatingHandles=new ns,this.polygonState="initial",this.removeIncompleteOnCancel=!1,this.manipulators=new Je,this._getSnappingContext=as((e=>new Fs({elevationInfo:{mode:"absolute-height",offset:0},pointer:e,editGeometryOperations:new le(new Ne("point",Xe(!0,!1,this.view.spatialReference)),this.view.state.viewingMode),visualizer:new As})))}initialize(){const{view:t,analysisViewData:e,manipulators:s,visible:i}=this;this.measurementView=new ni({view:t,analysisViewData:e,toolState:this,manipulators:s,visible:i});const n=zs(t);this._snappingManagerResult=n,this.addHandles(n),this._snappingOperation=new Hs({view:t}),this._updatingHandles.add((()=>this.stagedPoint),(a=>{this.analysisViewData.stagedPoint=a!=null?W(a,new X):null}),E),rs(this,(()=>{const a=this.view.inputManager.latestPointerType??"mouse",r=this._getSnappingContext(a);this._updatingHandles.addPromise(Ae(this._snappingOperation.snapAgainNearPreviousMapPoint(this._snappingManager,r)))})),this._setupManipulators(),this.addHandles([os((()=>this.state==="measured"),(()=>this.finishToolCreation()),E),this.analysisViewData.path.on("change",(()=>{const a=this.analysisViewData.path;this.polygonState!=="initial"||a.isEmptyPolygon||(a.isValidPolygon?this.polygonState="measured":this.polygonState="drawing")}))])}destroy(){this.measurementView.destroy(),this._set("measurementView",null),this._updatingHandles=V(this._updatingHandles)}get _snappingManager(){return this._snappingManagerResult.snappingManager}get state(){return this.analysisViewData.path.numVertices===0?"ready":this.analysisViewData.path.isValidPolygon&&this.polygonState!=="editing"?"measured":"measuring"}get cursor(){return this.active?"crosshair":null}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}get stagedPoint(){return this._snappingOperation.stagedPoint}set stagedPoint(t){this._snappingOperation.stagedPoint=t}get snappingOptions(){return this._snappingManager.options}finishMeasurement(){const{path:t}=this.analysisViewData;t.numVertices<=2||(t.close(),this.polygonState="measured",this._resetSnappingState(),this.active&&(this.view.activeTool=null))}resetCreated(){super.resetCreated(),this._resetSnappingState(),this.polygonState="initial",this.state==="measured"&&(this.polygonState="measured",this.finishToolCreation())}onShow(){this.measurementView.show()}onHide(){this.measurementView.hide()}onDeactivate(){this._resetSnappingState()}onInputEvent(t){switch(t.type){case"immediate-double-click":this._handleImmediateDoubleClick(t);break;case"immediate-click":this._handleImmediateClick(t);break;case"pointer-move":this._handlePointerMove(t);break;case"drag":this._handleDrag(t);break;case"key-down":this._handleKeyDown(t)}}_setupManipulators(){const t=s=>s.events.on("grab-changed",(()=>{if(this.analysisViewData.path.isValidPolygon){const i=this.manipulators.some((n=>n.manipulator.grabbing));this.polygonState=i?"editing":"measured"}})),e=s=>{this.addHandles([Is(s,((i,n,a,r)=>{const l=Os(i),d=i.metadata,u=this._snappingManager,p=this._getSnappingContext(r),c=this._updatingHandles,{snappingStep:f,cancelSnapping:_}=Es({snappingManager:u,snappingContext:p,updatingHandles:c});a=a.next(l).next((v=>(this.analysisViewData.lastDraggedVertex=null,this.analysisViewData.path.setVertexPosition(d,m),i.location=m,v))).next(_),n.next(l).next(Rs(this.view)).next(...f).next((v=>{i.location=v.mapEnd,this.analysisViewData.lastDraggedVertex=v.action==="end"?null:d,this.analysisViewData.path.setVertexPosition(d,W(v.mapEnd))}));const m=W(this.analysisViewData.path.getVertexPositionAsPoint(d))})),t(s)],s)};this.manipulators.forEach((({manipulator:s})=>{e(s)})),this.addHandles([this.manipulators.on("after-add",(({item:{manipulator:s}})=>{e(s)})),this.manipulators.on("after-remove",(({item:{manipulator:s}})=>this.removeHandles(s)))])}_handleImmediateDoubleClick(t){Re(t)&&(this.polygonState==="drawing"&&this.finishMeasurement(),t.stopPropagation())}_handleDrag(t){this.polygonState==="editing"&&t.stopPropagation()}_handleImmediateClick(t){if(!Re(t))return;const e=Oe(t),{pointerType:s}=t;if(this.active)switch(this.polygonState){case"initial":case"measured":if(this._addVertexAt(e,s))return this.stagedPoint=null,this.polygonState="drawing",void t.stopPropagation();break;case"drawing":{const i=this.measurementView.vertexHandleAt(e,s);if(i==null){if(this._addVertexAt(e,s))return this.stagedPoint=null,void t.stopPropagation()}else i.index===0&&(this.finishMeasurement(),t.stopPropagation());break}}t.pointerType==="mouse"&&this._hoverAt(e)}_handlePointerMove(t){if(t.pointerType==="mouse"){const e=Oe(t);this._hoverAt(e)}}_handleKeyDown(t){const{path:e}=this.analysisViewData;t.key===ls.complete&&this.polygonState==="drawing"&&e.numVertices>=3&&(this.stagedPoint=null,this.finishMeasurement(),t.stopPropagation())}_hoverAt(t){const{polygonState:e}=this;if(this.active&&hi.has(e)){const s=this._pick(t);if((s==null?void 0:s.mapPoint)!=null){const i=this._getSnappingContext("mouse");this._updatingHandles.addPromise(Ae(this._snappingOperation.snap({point:s.mapPoint},this._snappingManager,i)))}}else this.stagedPoint=null}_addVertexAt(t,e){const s=this._pick(t),i=s==null?void 0:s.mapPoint;if(i==null)return!1;this.analysis.valid&&this.polygonState==="measured"&&(this.analysis.clear(),this._set("created",!1),this.polygonState="initial");const n=this._getSnappingContext(e),a=this._snappingOperation.update({point:i},this._snappingManager,n),r=W(a,new X);return this.analysisViewData.path.add(r),!0}_pick(t){const e=new si(t);return this.measurementView.pick(e)}_resetSnappingState(){this._snappingManager.doneSnapping(),this._snappingOperation.abort(),this._snappingOperation.stagedPoint=null}get test(){}};o([h({readOnly:!0})],w.prototype,"state",null),o([h()],w.prototype,"polygonState",void 0),o([h({readOnly:!0})],w.prototype,"cursor",null),o([h()],w.prototype,"measurementView",void 0),o([h()],w.prototype,"removeIncompleteOnCancel",void 0),o([h({constructOnly:!0})],w.prototype,"view",void 0),o([h({constructOnly:!0})],w.prototype,"analysis",void 0),o([h({constructOnly:!0})],w.prototype,"analysisViewData",void 0),o([h({readOnly:!0})],w.prototype,"manipulators",void 0),o([h()],w.prototype,"updating",null),o([h()],w.prototype,"stagedPoint",null),o([h()],w.prototype,"snappingOptions",null),w=o([z("esri.views.3d.interactive.measurementTools.areaMeasurement3D.AreaMeasurement3DTool")],w);const hi=new Set(["initial","drawing","measured"]);let y=class extends gs(de){constructor(t){super(t),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.stagedPoint=null,this.mode=oe.Auto,this.tool=null,this.userOperation=null}initialize(){const{analysis:t,view:e}=this;this.path=new $({view:e,areaMeasurement:t}),this._analysisVisualization=new S({view:e,analysis:t,analysisViewData:this}),this.addResolvingPromise(Promise.all([hs(),ds()]).then((([s,i])=>{this.destroyed||(this._analysisController=new D({view:e,analysis:t,analysisViewData:this,geodesicAreaMeasurementUtils:s,geodesicLengthMeasurementUtils:i}))}))),this.addHandles(ms(this,w))}destroy(){_s(this),this.userOperation=us(this.userOperation),this._analysisController=V(this._analysisController),this._analysisVisualization=V(this._analysisVisualization),this.path.destroy()}get updating(){var t;return!!((t=this._analysisVisualization)!=null&&t.loadingMessages)}get result(){const{measurementData:t}=this;if(t==null)return{area:null,mode:null,perimeter:null};const{unit:e}=this;if(t.actualMeasurementMode==="euclidean"){const{area:n,perimeterLength:a}=t;return{area:n!=null?he(n,e):null,perimeter:a!=null?He(a,e):null,mode:"euclidean"}}const{geodesicArea:s,pathLength:i}=t;return{area:s!=null?he(s,e):null,perimeter:i!=null?He(i,e):null,mode:"geodesic"}}get viewData(){return this._analysisVisualization.viewData}get areaLabel(){return this._analysisVisualization.areaLabel}get perimeterLengthLabel(){return this._analysisVisualization.perimeterLengthLabel}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??ps(this.view)}get testData(){}place(t){return ys(this,{placementOptions:t})}};o([h()],y.prototype,"_analysisVisualization",void 0),o([h()],y.prototype,"_analysisController",void 0),o([h({readOnly:!0})],y.prototype,"type",void 0),o([h({constructOnly:!0,nonNullable:!0})],y.prototype,"analysis",void 0),o([h()],y.prototype,"updating",null),o([h()],y.prototype,"result",null),o([h()],y.prototype,"measurementData",void 0),o([h()],y.prototype,"viewData",null),o([h()],y.prototype,"areaLabel",null),o([h()],y.prototype,"perimeterLengthLabel",null),o([h()],y.prototype,"validMeasurement",null),o([h()],y.prototype,"path",void 0),o([h()],y.prototype,"lastDraggedVertex",void 0),o([h()],y.prototype,"stagedPoint",void 0),o([h()],y.prototype,"mode",void 0),o([h()],y.prototype,"unit",null),o([h()],y.prototype,"tool",void 0),o([h()],y.prototype,"userOperation",void 0),y=o([z("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],y);const zi=y,di=Object.freeze(Object.defineProperty({__proto__:null,build:Ye},Symbol.toStringTag,{value:"Module"}));export{zi as default};
